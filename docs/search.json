[{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"current-available-metrics","dir":"Articles","previous_headings":"","what":"Current available metrics","title":"Analyzing TNTP Common Metrics","text":"Currently, tntpmetrics functions calculate work following common metrics: Student surveys: Engagement, Relevance, Belonging Observation tools: IPG TNTP Core Teacher leader surveys: Expectations (current items older items) Assignments: Grade-Appropriate Assignments","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"practice-data-sets-ss_data_initial-ss_data_final-and-ipg_data","dir":"Articles","previous_headings":"","what":"Practice Data Sets: ss_data_initial, ss_data_final, and ipg_data","title":"Analyzing TNTP Common Metrics","text":"demonstrate apply common metric functions tntpmetrics, use two sets fake student survey data. data contains 1,000 student survey responses 26 classes beginning project (ss_data_initial.rda) another 1,000 student survey responses 26 classes end project (ss_data_final.rda). data automatically comes tntpmetrics package. data sets variable/column names, include value survey question Engagement, Relevance, Belonging constructs. Specifically, metrics based following survey items: eng_interest (“learning interesting.”) eng_like (“liked class.”) eng_losttrack (“learning lost track time.”) eng_moreabout (“thought learning anything else.”) rel_asmuch (“help learn just much kids schools.”) rel_future (“important future goals.”) rel_outside (“can use outside school.”) rel_rightnow (“important life right now.”) bel_ideas (“class, ideas really count.”) tch_interestedideas (“class, teacher interested ideas.”) bel_fitin (“class, feel like fit .”) tch_problem (“talk teacher class problem.”) surveys items take values 0 (True), 1 (Little True), 2 (Mostly True), 3 (True). Also data class ID, two demographic categorical character variables associated class. additional needed variables use functions IPG data, also practice fake observation data ipg_data.rda. data automatically comes tntpmetrics package. data contains 100 observations using IPG. four subjects represented.","code":"head(ss_data_initial) #>   class_id response_id class_frl_cat class_soc_cat bel_fitin bel_ideas #> 1        A           3 Under 50% FRL     0-25% SOC         3         3 #> 2        A          39 Under 50% FRL     0-25% SOC         2         2 #> 3        A          73 Under 50% FRL     0-25% SOC         2         2 #> 4        A          84 Under 50% FRL     0-25% SOC         2         3 #> 5        A          85 Under 50% FRL     0-25% SOC         2         2 #> 6        A          94 Under 50% FRL     0-25% SOC         2         2 #>   eng_interest eng_like eng_losttrack eng_moreabout rel_asmuch rel_future #> 1            2        2             2             2          2          2 #> 2            2        3             2             2          2          3 #> 3            2        2             2             2          2          2 #> 4            2        2             2             2          2          3 #> 5            2        3             2             2          2          2 #> 6            2        2             2             2          3          2 #>   rel_outside rel_rightnow tch_interestedideas tch_problem #> 1           2            2                   2           2 #> 2           2            2                   2           2 #> 3           2            2                   2           3 #> 4           2            2                   2           2 #> 5           2            2                   2           2 #> 6           2            2                   3           2"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-common-metrics","dir":"Articles","previous_headings":"","what":"Calculating Common Metrics","title":"Analyzing TNTP Common Metrics","text":"tntpmetrics contains simple function called make_metric attach new column/variable data value scored common metric. new column always prefix cm_ followed name metric. example, engagement metric simply sum four engagement survey items. use make_metric, simply provide data set want use, metric want calculated, making sure put latter quotes. result data new variable cm_engagement. function also tells many rows data construct created least one survey items missing.","code":"make_metric(data = ss_data_initial, metric = \"engagement\") %>%   select(response_id, starts_with(\"eng_\"), starts_with(\"cm_\")) %>%   head() #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #>   response_id eng_interest eng_like eng_losttrack eng_moreabout cm_engagement #> 1           3            2        2             2             2             8 #> 2          39            2        3             2             2             9 #> 3          73            2        2             2             2             8 #> 4          84            2        2             2             2             8 #> 5          85            2        3             2             2             9 #> 6          94            2        2             2             2             8 #>   cm_binary_engagement #> 1                 TRUE #> 2                 TRUE #> 3                 TRUE #> 4                 TRUE #> 5                 TRUE #> 6                 TRUE"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"binary-version-of-common-metric","dir":"Articles","previous_headings":"Calculating Common Metrics","what":"Binary version of common metric","title":"Analyzing TNTP Common Metrics","text":"Note , two new variables created: cm_engagement cm_binary_engagement. many common metrics, cut-point metric scale , scores take special meaning. engagement, example, scores 8 imply student particular response “engaged”. variable cm_binary_engagement TRUE engagement score cut-point FALSE . common metrics, guidance set goals around actual metric score, binary version, binary version reduces nuance data. However, know teams interested binary classifications cm_binary_ variables always created run make_metric long metric defined cut-point. (metric tntpcore defined cut-point.)","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"checking-for-common-errors","dir":"Articles","previous_headings":"Calculating Common Metrics","what":"Checking for common errors","title":"Analyzing TNTP Common Metrics","text":"make_metric automatically checks common data issues.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"misspelled-variables","dir":"Articles","previous_headings":"Calculating Common Metrics > Checking for common errors","what":"Misspelled Variables","title":"Analyzing TNTP Common Metrics","text":"First, requires data variable names spelled exactly . nothing special variable names, function choose default. data variable names spelled differently, ’ll change using make_metric. Otherwise, ’ll get error: variable names needed metric can always found typing ? make_metric; also detailed later vignette.","code":"ss_data_initial %>%   rename(eng_interest_wrongspelling = eng_interest) %>%   make_metric(metric = \"engagement\") #> Error: Data set data is missing the following variable(s): eng_interest  #>  Make sure spelling is correct."},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"items-on-the-wrong-scale","dir":"Articles","previous_headings":"Calculating Common Metrics > Checking for common errors","what":"Items on the wrong scale","title":"Analyzing TNTP Common Metrics","text":"Second, make_metric check item ensure ’s expected scale. student survey items, expects scale 0-3 outlined . data value outside scale, ’ll get error telling variables scale proper scale : also get error scales numeric: scales needed metric detailed later vignette.","code":"ss_data_initial %>%   mutate(     eng_interest = eng_interest + 1,     eng_like = eng_like - 1   ) %>%   make_metric(metric = \"engagement\") #> Error: In data the following variable(s) have a value out of scale:  #>  eng_like, eng_interest  #>  They should only take values of 0, 1, 2, 3 ss_data_initial %>%   mutate(     eng_interest = case_when(         eng_like == 0 ~ \"Not True\",         eng_like == 1 ~ \"A Little True\",         eng_like == 2 ~ \"Mostly True\",         eng_like == 3 ~ \"Very True\"     )   ) %>%   make_metric(metric = \"engagement\") #> Error: In data the following variable(s) have a value out of scale:  #>  eng_interest  #>  They should only take values of 0, 1, 2, 3"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"optional-censored-scale-use","dir":"Articles","previous_headings":"Calculating Common Metrics > Checking for common errors","what":"(Optional) Censored scale use","title":"Analyzing TNTP Common Metrics","text":"times items may wrong scale, way undetectable. example, student survey data provided item scale 1-4, students never responded “True”, data actually values 1-3. Values 1-3 scale student surveys, preceding error occur. account , make_metric automatically checks possible value scale used gives warning case indicating affected variables value(s) use: technically error, can turn default warning setting scaleusewarning = F:","code":"ss_data_initial %>%   mutate(eng_interest = ifelse(eng_interest == 0, NA, eng_interest)) %>%   make_metric(metric = \"engagement\") %>%   head() #> Warning: Not all the possible values for each variable were used in data The following variables did NOT use the following values:  #>  eng_interest: 0  #>  This is not an error, but you should confirm that all values are on the scale: 0, 1, 2, 3 #> [1] \"199 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #>   class_id response_id class_frl_cat class_soc_cat bel_fitin bel_ideas #> 1        A           3 Under 50% FRL     0-25% SOC         3         3 #> 2        A          39 Under 50% FRL     0-25% SOC         2         2 #> 3        A          73 Under 50% FRL     0-25% SOC         2         2 #> 4        A          84 Under 50% FRL     0-25% SOC         2         3 #> 5        A          85 Under 50% FRL     0-25% SOC         2         2 #> 6        A          94 Under 50% FRL     0-25% SOC         2         2 #>   eng_interest eng_like eng_losttrack eng_moreabout rel_asmuch rel_future #> 1            2        2             2             2          2          2 #> 2            2        3             2             2          2          3 #> 3            2        2             2             2          2          2 #> 4            2        2             2             2          2          3 #> 5            2        3             2             2          2          2 #> 6            2        2             2             2          3          2 #>   rel_outside rel_rightnow tch_interestedideas tch_problem cm_engagement #> 1           2            2                   2           2             8 #> 2           2            2                   2           2             9 #> 3           2            2                   2           3             8 #> 4           2            2                   2           2             8 #> 5           2            2                   2           2             9 #> 6           2            2                   3           2             8 #>   cm_binary_engagement #> 1                 TRUE #> 2                 TRUE #> 3                 TRUE #> 4                 TRUE #> 5                 TRUE #> 6                 TRUE ss_data_initial %>%   mutate(eng_interest = ifelse(eng_interest == 0, NA, eng_interest)) %>%   make_metric(metric = \"engagement\", scaleusewarning = F) %>%   head() #> [1] \"199 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #>   class_id response_id class_frl_cat class_soc_cat bel_fitin bel_ideas #> 1        A           3 Under 50% FRL     0-25% SOC         3         3 #> 2        A          39 Under 50% FRL     0-25% SOC         2         2 #> 3        A          73 Under 50% FRL     0-25% SOC         2         2 #> 4        A          84 Under 50% FRL     0-25% SOC         2         3 #> 5        A          85 Under 50% FRL     0-25% SOC         2         2 #> 6        A          94 Under 50% FRL     0-25% SOC         2         2 #>   eng_interest eng_like eng_losttrack eng_moreabout rel_asmuch rel_future #> 1            2        2             2             2          2          2 #> 2            2        3             2             2          2          3 #> 3            2        2             2             2          2          2 #> 4            2        2             2             2          2          3 #> 5            2        3             2             2          2          2 #> 6            2        2             2             2          3          2 #>   rel_outside rel_rightnow tch_interestedideas tch_problem cm_engagement #> 1           2            2                   2           2             8 #> 2           2            2                   2           2             9 #> 3           2            2                   2           3             8 #> 4           2            2                   2           2             8 #> 5           2            2                   2           2             9 #> 6           2            2                   3           2             8 #>   cm_binary_engagement #> 1                 TRUE #> 2                 TRUE #> 3                 TRUE #> 4                 TRUE #> 5                 TRUE #> 6                 TRUE"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"required-column-names-and-scales-for-each-common-metric","dir":"Articles","previous_headings":"Calculating Common Metrics","what":"Required column names and scales for each common metric","title":"Analyzing TNTP Common Metrics","text":"required column names associated scales metric. See Goals Guidance Hub details. Note names columns needed data. doesn’t mean every row must value variables. can okay variables NA values specific rows. example, K-5 Literacy observations IPG require either Core Actions (ca1_a, ca1_b, ca1_c, ca2_overall, ca3_overall) /rfs_overall. observation core actions still needs variable called rfs_overall, value can NA. Metric name use package: metric = engagement eng_interest (“learning interesting.”) eng_like (“liked class.”) eng_losttrack (“learning lost track time.”) eng_moreabout (“thought learning anything else.”) Scale: 0 (True), 1 (Little True), 2 (Mostly True), 3 (True). Metric name use package: metric = relevance rel_asmuch (“help learn just much kids schools.”) rel_future (“important future goals.”) rel_outside (“can use outside school.”) rel_rightnow (“important life right now.”) Scale: 0 (True), 1 (Little True), 2 (Mostly True), 3 (True). Metric name use package: metric = belonging bel_ideas (“class, ideas really count.”) tch_interestedideas (“class, teacher interested ideas.”) bel_fitin (“class, feel like fit .”) tch_problem (“talk teacher class problem.”) Scale: 0 (True), 1 (Little True), 2 (Mostly True), 3 (True). Metric name use package: metric = expectations exp_fairtomaster (“’s fair expect students class master standards end year.”) exp_oneyearenough (“One year enough time students class master standards.”) exp_allstudents (“students class can master grade-level standards end year.”) exp_appropriate (“standards appropriate students class.”) Scale: 0 (Strongly Disagree), 1 (Disagree), 2 (Somewhat Disagree), 3 (Somewhat Agree), 4 (Agree), 5 (Strongly Agree). Metric name use package: metric = expectation_old exp_allstudents (“students class can master grade-level standards end year.”) exp_toochallenging (“standards challenging students class.”) exp_oneyear (“One year enough time students class master standards.”) exp_different (“Students class need something different outlined standards.”) exp_overburden (“Students class overburdened demands standards.”) exp_began (“students began year, spend nearly time standards earlier grades.”) Metric name use package: metric = tntpcore ec (“Essential Content”) ao (“Academic Ownership”) dl (“Demonstration Learning”) cl (“Culture Learning”) Scale: 1 (Ineffective), 2 (Minimally Effective), 3 (Developing), 4 (Proficient), 5 (Skillful) Metric name use package: metric = ipg ca1_a (“Core Action 1A”) ca1_b (“Core Action 1B”) ca1_c (“Core Action 1C”) ca2_overall (“Core Action 2 Overall”) ca3_overall (“Core Action 3 Overall”) col rfs_overall (“Reading Foundation Skills Overall”) ca1_d (“Core Action 1D”) ca1_e (“Core Action 1E”) ca1_f (“Core Action 1F”) science_filter (“Text”, “Inquiry Scientific Practice”, “”, “Neither”.) grade_level (“Numeric grade-level”) form (“Math”, “Literacy”, “Science”, “Social Studies”). Scale: ca1_a, ca1_b, ca1_c, ca1_d, ca1_e, ca1_f 0 () 1 (Yes). items 1 (Yet), 2 (Somewhat), 3 (Mostly), 4 (Yes) Note: RFS Overall required observation data contains K-5 Literacy observations. Core Action 1 D - F required data contains science observations. Metric name use package: metric = assignments Items: content, practice, relevance Scale: 0 (Opportunity), 1 (Minimal Opportunity), 2 (Sufficient Opportunity)","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"a-note-about-the-expectations-metric","dir":"Articles","previous_headings":"Calculating Common Metrics","what":"A note about the expectations metric","title":"Analyzing TNTP Common Metrics","text":"items used measure expectations shifted collection six, mostly reverse-coded worded items four positively worded items. expectations metrics available, current 4-item expectations metric known “expectations” older 6-item expectations metric known “expectations_old”. , use older 6-item expectations metric package set metric = expectations_old use current 4-item expectations metric set metric = expectations.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"a-note-about-the-ipg","dir":"Articles","previous_headings":"Calculating Common Metrics","what":"A note about the IPG","title":"Analyzing TNTP Common Metrics","text":"IPG complicated scoring approach common metrics. originally intended diagnostic development (rather evaluation) tool, different components based subject matter, indicators different scales, can often layers skip logic online form used capture data. Nevertheless, make_metric works just easily IPG metrics, users aware three things: function expects Core Action 1 indicators 0-1 scale, Core Action scores (RFS Overall Culture Learning) 1-4 scale. make function work easily data coming Academic Diagnostic forms, tend use scales. make_metric automatically place everything proper scale. make_metric account observations excluded. example, Literacy observations unrateable focused narrative writing. make_metric expect type skip-logic filters often accompany online Academic Diagnostic form, ’s analyst first exclude observations included based business rules. Similarly, online skip logic, occasions Core Actions 2 3 set lowest possible value observer skipped past questions. values left NA, make_metric return NAs overall common metric score. analyst must apply appropriate business rules using make_metric. somewhat increased complexity, additional IPG examples end vignette.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"goals-analysis","dir":"Articles","previous_headings":"","what":"Goals Analysis","title":"Analyzing TNTP Common Metrics","text":"cases, making common metric just intermediate step scoring metric goals purposes. tntpmetric two functions make necessary goals calculations . cases, need create metric ahead time. Just provide function raw data, indicate metric interest type analysis needed.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-the-average-common-metric-score","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating the average common metric score","title":"Analyzing TNTP Common Metrics","text":"want calculate average common metric score single point time, can use function metric_mean. example, calculate average Sense Belonging score initial survey data, simply give data indicate ’s “belonging” metric. (by_class option discussed ) metric_means estimates mean using multilevel model framework, takes advantage R package emmeans print output. overall mean displayed first element returned list emmean. robust result, also provided appropriate Standard Error (SE) lower upper bounds 95% Confidence Interval (lower.CL upper.cl)","code":"metric_mean(ss_data_initial, metric = \"belonging\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean    SE df lower.CL upper.CL #>  overall    4.9 0.473 25     3.93     5.87 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"using-the-binary-version-of-the-variable","dir":"Articles","previous_headings":"Goals Analysis","what":"Using the binary version of the variable","title":"Analyzing TNTP Common Metrics","text":"function metric_mean also works binary version construct. Simply set option use_binary TRUE: outcome TRUE/FALSE binary, mean always proportion 0 1. example, value 0.238 implies 23.8% responses data set “engaged”.","code":"metric_mean(ss_data_initial, metric = \"engagement\", use_binary = T, by_class = T) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean     SE   df lower.CL upper.CL #>  overall  0.238 0.0714 24.9   0.0906    0.385 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 994 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-the-average-common-metric-score-for-different-groups","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating the average common metric score for different groups","title":"Analyzing TNTP Common Metrics","text":"Many projects equity-based goals require looking mean common metric scores different types classrooms. example, student survey data variable class_frl_cat indicating whether response comes class least 50% students receiving free reduced price lunch class fewer 50% students receive FRL. look results group, simply include column name equity_group: Now, results show mean types classes, include another entry returned list called “Difference(s) groups” calculates contrast, difference group means, gives standard error p-value case ’s interest. Note contrast always represented first group listed minus second group listed. case, reported difference negative, means classes 50% FRL students tended higher sense belonging score. Equity group comparisons work even two group values, like variable class_soc_cat: ’s rare projects set equity goals factors many different groups, metric_mean warns equity_group variable 5 categories; usually means something wrong variable.","code":"metric_mean(ss_data_initial, metric = \"belonging\", equity_group = \"class_frl_cat\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means` #>  equity_group     emmean    SE df lower.CL upper.CL #>  At least 50% FRL   2.87 0.351 24     2.15     3.60 #>  Under 50% FRL      6.93 0.351 24     6.20     7.65 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast                         estimate    SE df t.ratio p.value #>  At least 50% FRL - Under 50% FRL    -4.05 0.496 24  -8.164  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26 metric_mean(ss_data_initial, metric = \"belonging\", equity_group = \"class_soc_cat\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means` #>  equity_group emmean    SE   df lower.CL upper.CL #>  0-25% SOC      8.01 0.314 22.2     7.36     8.66 #>  26-50% SOC     6.18 0.312 21.8     5.54     6.83 #>  51-75% SOC     4.20 0.312 21.8     3.56     4.85 #>  76-100% SOC    2.12 0.271 22.0     1.56     2.69 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast                     estimate    SE   df t.ratio p.value #>  (0-25% SOC) - (26-50% SOC)       1.82 0.443 22.0   4.120  0.0024 #>  (0-25% SOC) - (51-75% SOC)       3.80 0.443 22.0   8.590  <.0001 #>  (0-25% SOC) - (76-100% SOC)      5.88 0.415 22.1  14.183  <.0001 #>  (26-50% SOC) - (51-75% SOC)      1.98 0.442 21.8   4.482  0.0010 #>  (26-50% SOC) - (76-100% SOC)     4.06 0.414 21.9   9.814  <.0001 #>  (51-75% SOC) - (76-100% SOC)     2.08 0.414 21.9   5.026  0.0003 #>  #> Degrees-of-freedom method: satterthwaite  #> P value adjustment: tukey method for comparing a family of 4 estimates  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"the-by_class-option","dir":"Articles","previous_headings":"Goals Analysis","what":"The by_class option","title":"Analyzing TNTP Common Metrics","text":"metrics collect multiple data points single class. example, student surveys survey multiple students class, many cases multiple times. different classes almost surely different number associated data points – classes might get 10 surveys, another might get 50 – need approach doesn’t - -represent classes differences sample sizes. Fortunately, multilevel models -girding functions tntpmetrics account differences sample sizes classes automatically. make work, must variable data titled class_id representing classroom’s unique identifier. must also set by_class = T examples. set by_class = T /class_id variable, metric_mean account differences sample sizes class. cases multiple rows data associated class, accounting class IDs statistically inappropriate standard errors confidence intervals likely small. projects surely forget collect class ID, metric_means still give results even set by_class = F (specify option, FALSE default), warn statistical issue using metric expecting class ID, like student surveys assignments: get warning set by_class = F analyzing metric less likely multiple responses per class, like expectations observations.","code":"metric_mean(ss_data_initial, metric = \"belonging\") #> Warning: To properly analyze the belonging metric, you should have a variable #> called class_id in your data, and set by_class = TRUE. If you did not collect #> a class ID your results might not be appropriate. Contact Cassie Coddington to #> discuss. #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean     SE  df lower.CL upper.CL #>  overall   4.85 0.0794 995     4.69     5.01 #>  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 996"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-average-growth-over-time","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating average growth over time","title":"Analyzing TNTP Common Metrics","text":"examine average metric score changed two time points, use function metric_growth. function works metric_mean expects provide two data sets: one first time point (data1) one later time point (data2). example, look engagement changed time, can use: example, mean engagement score initially 4.93, increased 5.99 final data collection. difference growth 1.06 points.","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",    by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Means at each timepoint` #>  time    emmean     SE   df lower.CL upper.CL #>  Final    0.326 0.0743 25.3   0.1731    0.479 #>  Initial  0.234 0.0743 25.3   0.0809    0.387 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between timepoints` #>  contrast        estimate     SE   df t.ratio p.value #>  Final - Initial   0.0922 0.0115 1965   8.035  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"using-the-binary-version-of-the-variable-1","dir":"Articles","previous_headings":"Goals Analysis","what":"Using the binary version of the variable","title":"Analyzing TNTP Common Metrics","text":"function metric_growth also works binary version construct. Simply set option use_binary TRUE: , remember values represent proportions 0 1. example , 23% responses initial data engaging 33% engaging final data. difference (0.0922) represents 9 percentage points.","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",   use_binary = T,   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Means at each timepoint` #>  time    emmean     SE   df lower.CL upper.CL #>  Final    0.326 0.0743 25.3   0.1731    0.479 #>  Initial  0.234 0.0743 25.3   0.0809    0.387 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between timepoints` #>  contrast        estimate     SE   df t.ratio p.value #>  Final - Initial   0.0922 0.0115 1965   8.035  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-differences-in-growth-over-time-between-equity-groups","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating differences in growth over time between equity groups","title":"Analyzing TNTP Common Metrics","text":"can also examine growth compared different groups specifying equity group: example, classes least 50% students receiving FRL initial engagement score 2.93, grew 4.02 final data collection. Classrooms 50% FRL students also grew, 6.94 7.97. Adding equity_group option directly show difference two groups varied time point. case, classes least 50% FRL students engagement scores 4.01 points lower classes initially, 3.95 points lower final data collection. difference differences (.e., -3.95 - -4.01 = 0.0659) shown list element “Change differences groups time”. case, difference small significantly different 0 (p-value 0.48), implying gap types classrooms change meaningfully time. must group definitions data sets, ’ll get error:","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",   equity_group = \"class_frl_cat\",   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means at each timepoint` #> time = Initial: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00365 0.0714 24.6   -0.143    0.151 #>  Under 50% FRL    0.46356 0.0714 24.6    0.316    0.611 #>  #> time = Final: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00645 0.0714 24.6   -0.141    0.154 #>  Under 50% FRL    0.64546 0.0714 24.6    0.498    0.793 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between groups at each timepoint` #> time = Initial: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.460 0.101 24.6  -4.557  0.0001 #>  #> time = Final: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.639 0.101 24.6  -6.332  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Change in differences between groups over time` #> contrast = At least 50% FRL - Under 50% FRL: #>  contrast1       estimate     SE   df t.ratio p.value #>  Final - Initial   -0.179 0.0226 1965  -7.923  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26 # Renaming FRL class variable so it doesn't match initial data ss_data_final_error <- ss_data_final %>%   mutate(     class_frl_cat = ifelse(       class_frl_cat == \"At least 50% FRL\",       \">= 50% FRL\",       class_frl_cat     )   ) metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final_error,    metric = \"engagement\",   equity_group = \"class_frl_cat\",   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> Error: Some values of equity group are not present in BOTH data sets."},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"ipg-examples","dir":"Articles","previous_headings":"","what":"IPG Examples","title":"Analyzing TNTP Common Metrics","text":"Analyzing IPG data requires additional variables beyond used directly scoring construct. IPG calculates construct differently based subject grade-level observation. Though calculations slightly involved, can use functions tntpmetrics way examples . just need make sure observation necessary variables.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"ipg-data-should-be-long-and-tidy","dir":"Articles","previous_headings":"IPG Examples","what":"IPG data should be long and tidy","title":"Analyzing TNTP Common Metrics","text":"tntpmetrics expects IPG data long tidy: row separate observation, column represent just one thing. , one column titled ca2_overall (representing overall score Core Action 2); separate variable subject (.e., math2_overall, rlc2_overall, science2_overall, etc.), “tidy” column now contains information two things: subjects core action 2 scores. Instead, must separate column/variable called form data indicating subject IPG applied. Depending project, might require compile IPG data separate forms WordPress/Formidable using tntpmetrics package.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"additional-needed-variables","dir":"Articles","previous_headings":"IPG Examples","what":"Additional needed variables","title":"Analyzing TNTP Common Metrics","text":"working IPG, observations need variable called form must “Literacy”, “Math”, “Science”, “Social Studies”. observations also need variable called grade_level, numeric can range -1 12, -1 Pre-K 0 Kindergarten. literacy observations take place Pre-K 5th grade classroom must also variable called rfs_overall represents overall score reading foundation skills. Science observations must additional Core Action 1 domains ca1_d, ca1_e, ca1_f. additional domains get scored depends value gatekeeper filter question form: “lesson focus text inquiry scientific practice (experimentation, application, modeling, analysis, etc.)? Note “texts” context also means scientifically appropriate mediums communication, like grade-appropriate videos, data sets, models, etc.“. Thus, science observations must also variable called science_filter must values ”Text“,”Inquiry Scientific Practice“,”“, ”Neither\".","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"calculating-observation-scores","dir":"Articles","previous_headings":"IPG Examples","what":"Calculating observation scores","title":"Analyzing TNTP Common Metrics","text":"needed variables, can create overall observation score just examples: , notice Core Actions 2 3, Culture Learning rescaled order calculate IPG construct (cm_ipg) returned original scale 1-4. Additionally, oveall Core Action 1 score created new variable (ca1_overall) subdomains included original data. note happens variable called form: … don’t variable called grade_level: … either takes unexpected values: fact, NAs allowed grade-level form determine construct scored. get error data rows NAs columns:","code":"ipg_data %>%   make_metric(metric = \"ipg\") %>%   select(ends_with(\"overall\"), col, cm_ipg) %>%   head() #>   ca2_overall ca3_overall rfs_overall ca1_overall col cm_ipg #> 1           4           1          NA           1   2   1.25 #> 2           1           1          NA           1   4   1.00 #> 3           4           1          NA           1   4   1.75 #> 4           1           4          NA           0   3   1.25 #> 5           3           3          NA           1   3   1.75 #> 6           1           3          NA           2   1   1.00 ipg_data %>%   select(-form) %>%   make_metric(metric = \"ipg\") #> Error: Data is missing the following variable(s): form  #>  Make sure spelling is correct. ipg_data %>%   select(-grade_level) %>%   make_metric(metric = \"ipg\") #> Error: Data is missing the following variable(s): grade_level  #>  Make sure spelling is correct. ipg_data %>%   mutate(form = ifelse(row_number() == 1, \"Blarg\", form)) %>%    make_metric(metric = \"ipg\") #> Error: form variable has values other than Math, Literacy, Science, or Social Studies  #>  Make sure subject options are spelled correctly with correct capitalization. ipg_data %>%   mutate(grade_level = ifelse(row_number() == 1, 15, grade_level)) %>%    make_metric(metric = \"ipg\") #> Error: grade_level has values other than -1, 0, 1, 2, ...12.  #>  Make sure grade_level variable is an integer between -1 and 13. ipg_data %>%   mutate(form = ifelse(row_number() == 1, NA, form)) %>%    make_metric(metric = \"ipg\") #> Error in data_scale_check_ipg(data): All observations must have a value for form. NAs are not allowed."},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"missing-ratings","dir":"Articles","previous_headings":"IPG Examples","what":"Missing ratings","title":"Analyzing TNTP Common Metrics","text":"tntpmetric attempt create overall IPG score every observation data. However, can needed domain ratings included. cases observation missing required domain rating – example, observation missing overall score Core Action 2 Culture Learning – return NA overall IPG construct value tell many observations missing key information. example , can see warning purposefully drop key domain ratings data applying make_metric function: Note messages warnings, code still run. affected observatinos now NAs value overall construct (cm_ippg).","code":"ipg_data %>%   mutate(     col = ifelse(row_number() == 1, NA, col),     ca3_overall = ifelse(row_number() == 2, NA, ca3_overall),     rfs_overall = ifelse(row_number() == 14, NA, rfs_overall),     ca2_overall = ifelse(row_number() == 14, NA, ca2_overall)   ) %>%    make_metric(metric = \"ipg\") %>%   select(observation_number, ends_with(\"overall\"), col, cm_ipg) %>%   slice(1:5, 14) #> Warning: 1 K-5 Literacy observation(s) were missing an overall RFS score and #> some Core Actions. These observations need an overall RFS score or all three #> Core Actions, or both in order to have an overall IPG score calculated. #> Warning: 1 Observation(s) have a missing score on at least one of the Core #> Actions. Observations must be rated on all Core Actions in order to have an #> overall IPG score calculated. In many cases, missing scores should be set to the #> lowest possible value or, if it's ineligible, the entire observation should be #> removed before scoring. Check the scoring guide for more details. #> Warning: 1 Observation(s) have a missing score on Culture of Learning. #> Observations must be rated on Culture of Learning in order to have an overall #> IPG score calculated. #>   observation_number ca2_overall ca3_overall rfs_overall ca1_overall col cm_ipg #> 1                  1           4           1          NA           1  NA     NA #> 2                  2           1          NA          NA           1   4     NA #> 3                  3           4           1          NA           1   4   1.75 #> 4                  4           1           4          NA           0   3   1.25 #> 5                  5           3           3          NA           1   3   1.75 #> 6                 14          NA           2          NA           2   4     NA"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"science-observation-scores","dir":"Articles","previous_headings":"IPG Examples","what":"Science observation scores","title":"Analyzing TNTP Common Metrics","text":"(time writing) new science IPG form Core Action 1 subdomain ratings account variety lessons science observers might see. tntpmetrics accounts scoring approaches, must include variable called science_filter data tell function Core Action 1 values expect. Without variable, get error:","code":"ipg_data %>%   filter(form == \"Science\") %>%   make_metric(metric = \"ipg\") %>%   select(science_filter, starts_with(\"ca\"), col, cm_ipg) %>%   head() #>   science_filter ca1_a ca1_b ca1_c ca1_d ca1_e ca1_f ca2_overall ca3_overall #> 1           Both     0     1     0     0     0     1           4           1 #> 2        Neither     0     0    NA    NA    NA    NA           1           4 #> 3           Text     1     0     1     1     0    NA           3           3 #> 4           Text     0     1     1     0     0    NA           1           1 #> 5        Neither     0     0    NA    NA    NA    NA           2           3 #> 6           Both     1     0     0     1     0     0           1           2 #>   ca1_overall col cm_ipg #> 1           1   2   1.25 #> 2           0   3   1.25 #> 3           1   3   1.75 #> 4           1   2   0.50 #> 5           0   2   1.00 #> 6           1   1   0.50  ipg_data %>%   filter(form == \"Science\") %>%   select(-science_filter) %>%   make_metric(metric = \"ipg\") #> Error: Data contains science observation(s) but is missing the following variables: science_filter  #>  Make sure they are spelled correctly."},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"ipg-goals","dir":"Articles","previous_headings":"IPG Examples","what":"IPG goals","title":"Analyzing TNTP Common Metrics","text":"needed variables proper, allowable values, functions tntpmetrics calculate means (overall group) changes time work identically student survey examples . instance:","code":"ipg_data %>%   metric_mean(metric = \"ipg\") #> $`Overall mean` #>  1       emmean     SE df lower.CL upper.CL #>  overall   1.44 0.0502 99     1.34     1.54 #>  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 100"},{"path":"https://adammaier.github.io/tntpmetrics/articles/analyzing_metrics.html","id":"questions","dir":"Articles","previous_headings":"","what":"Questions?","title":"Analyzing TNTP Common Metrics","text":"Contact Adam Maier Cassie Coddington questions.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"calculating-metrics-with-make_metric","dir":"Articles","previous_headings":"","what":"Calculating metrics with make_metric","title":"Overview of Creating Metrics","text":"tntpmetrics contains simple function called make_metric attach new column/variable data value scored common metric. new column always prefix cm_ followed name metric. example, engagement metric simply sum four engagement survey items. use make_metric, simply provide data set want use, metric want calculated, making sure put latter quotes. result data new variable cm_engagement. function also tells many rows data construct created least one survey items missing.","code":"make_metric(data = ss_data_initial, metric = \"engagement\") %>%   select(response_id, starts_with(\"eng_\"), starts_with(\"cm_\")) %>%   head() %>%   kable() #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"binary-version-of-common-metric","dir":"Articles","previous_headings":"Calculating metrics with make_metric","what":"Binary version of common metric","title":"Overview of Creating Metrics","text":"Note , two new variables created: cm_engagement cm_binary_engagement. many common metrics, cut-point metric scale , scores take special meaning. engagement, example, scores 8 imply student particular response “engaged”. variable cm_binary_engagement TRUE engagement score cut-point FALSE . common metrics, guidance set goals around actual metric score, binary version, binary version reduces nuance data. However, know teams interested binary classifications cm_binary_ variables always created run make_metric long metric defined cut-point. (metric tntpcore defined cut-point.)","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"checking-for-common-errors","dir":"Articles","previous_headings":"","what":"Checking for common errors","title":"Overview of Creating Metrics","text":"make_metric automatically checks common data issues.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"misspelled-variables","dir":"Articles","previous_headings":"Checking for common errors","what":"Misspelled Variables","title":"Overview of Creating Metrics","text":"First, requires data variable names spelled exactly . nothing special variable names, function choose default. data variable names spelled differently, ’ll change using make_metric. Otherwise, ’ll get error: variable names needed metric can always found typing ? make_metric; also detailed articles metric.","code":"ss_data_initial %>%   rename(eng_interest_wrongspelling = eng_interest) %>%   make_metric(metric = \"engagement\") #> Error: Data set data is missing the following variable(s): eng_interest  #>  Make sure spelling is correct."},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"items-on-the-wrong-scale","dir":"Articles","previous_headings":"Checking for common errors","what":"Items on the wrong scale","title":"Overview of Creating Metrics","text":"Second, make_metric check item ensure ’s expected scale. student survey items, expects scale 0-3 outlined . data value outside scale, ’ll get error telling variables scale proper scale : also get error scales numeric: scales needed metric detailed metric articles.","code":"ss_data_initial %>%   mutate(     eng_interest = eng_interest + 1,     eng_like = eng_like - 1   ) %>%   make_metric(metric = \"engagement\") #> Error: In data the following variable(s) have a value out of scale:  #>  eng_like, eng_interest  #>  They should only take values of 0, 1, 2, 3 ss_data_initial %>%   mutate(     eng_interest = case_when(         eng_like == 0 ~ \"Not True\",         eng_like == 1 ~ \"A Little True\",         eng_like == 2 ~ \"Mostly True\",         eng_like == 3 ~ \"Very True\"     )   ) %>%   make_metric(metric = \"engagement\") #> Error: In data the following variable(s) have a value out of scale:  #>  eng_interest  #>  They should only take values of 0, 1, 2, 3"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"optional-censored-scale-use","dir":"Articles","previous_headings":"Checking for common errors","what":"(Optional) Censored scale use","title":"Overview of Creating Metrics","text":"times items may wrong scale, way undetectable. example, student survey data provided item scale 1-4, students never responded “True”, data actually values 1-3. Values 1-3 scale student surveys, preceding error occur. account , make_metric automatically checks possible value scale used gives warning case indicating affected variables value(s) use: technically error, can turn default warning setting scaleusewarning = F:","code":"ss_data_initial %>%   mutate(eng_interest = ifelse(eng_interest == 0, NA, eng_interest)) %>%   make_metric(metric = \"engagement\") %>%   head() %>%   kable() #> Warning: Not all the possible values for each variable were used in data The following variables did NOT use the following values:  #>  eng_interest: 0  #>  This is not an error, but you should confirm that all values are on the scale: 0, 1, 2, 3 #> [1] \"199 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" ss_data_initial %>%   mutate(eng_interest = ifelse(eng_interest == 0, NA, eng_interest)) %>%   make_metric(metric = \"engagement\", scaleusewarning = F) %>%   head() #> [1] \"199 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #>   class_id response_id class_frl_cat class_soc_cat bel_fitin bel_ideas #> 1        A           3 Under 50% FRL     0-25% SOC         3         3 #> 2        A          39 Under 50% FRL     0-25% SOC         2         2 #> 3        A          73 Under 50% FRL     0-25% SOC         2         2 #> 4        A          84 Under 50% FRL     0-25% SOC         2         3 #> 5        A          85 Under 50% FRL     0-25% SOC         2         2 #> 6        A          94 Under 50% FRL     0-25% SOC         2         2 #>   eng_interest eng_like eng_losttrack eng_moreabout rel_asmuch rel_future #> 1            2        2             2             2          2          2 #> 2            2        3             2             2          2          3 #> 3            2        2             2             2          2          2 #> 4            2        2             2             2          2          3 #> 5            2        3             2             2          2          2 #> 6            2        2             2             2          3          2 #>   rel_outside rel_rightnow tch_interestedideas tch_problem cm_engagement #> 1           2            2                   2           2             8 #> 2           2            2                   2           2             9 #> 3           2            2                   2           3             8 #> 4           2            2                   2           2             8 #> 5           2            2                   2           2             9 #> 6           2            2                   3           2             8 #>   cm_binary_engagement #> 1                 TRUE #> 2                 TRUE #> 3                 TRUE #> 4                 TRUE #> 5                 TRUE #> 6                 TRUE"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"goals-analysis","dir":"Articles","previous_headings":"","what":"Goals Analysis","title":"Overview of Creating Metrics","text":"cases, making common metric just intermediate step scoring metric goals purposes. tntpmetric two functions make necessary goals calculations . cases, need create metric ahead time. Just provide function raw data, indicate metric interest type analysis needed.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"calculating-the-average-common-metric-score","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating the average common metric score","title":"Overview of Creating Metrics","text":"want calculate average common metric score single point time, can use function metric_mean. example, calculate average Sense Belonging score initial survey data, simply give data indicate ’s “belonging” metric. (by_class option discussed ) metric_means estimates mean using multilevel model framework, takes advantage R package emmeans print output. overall mean displayed first element returned list emmean. robust result, also provided appropriate Standard Error (SE) lower upper bounds 95% Confidence Interval (lower.CL upper.cl)","code":"metric_mean(ss_data_initial, metric = \"belonging\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean    SE df lower.CL upper.CL #>  overall    4.9 0.473 25     3.93     5.87 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"using-the-binary-version-of-the-variable","dir":"Articles","previous_headings":"Goals Analysis","what":"Using the binary version of the variable","title":"Overview of Creating Metrics","text":"function metric_mean also works binary version construct. Simply set option use_binary TRUE: outcome TRUE/FALSE binary, mean always proportion 0 1. example, value 0.238 implies 23.8% responses data set “engaged”.","code":"metric_mean(ss_data_initial, metric = \"engagement\", use_binary = T, by_class = T) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean     SE   df lower.CL upper.CL #>  overall  0.238 0.0714 24.9   0.0906    0.385 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 994 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"calculating-the-average-common-metric-score-for-different-groups","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating the average common metric score for different groups","title":"Overview of Creating Metrics","text":"Many projects equity-based goals require looking mean common metric scores different types classrooms. example, student survey data variable class_frl_cat indicating whether response comes class least 50% students receiving free reduced price lunch class fewer 50% students receive FRL. look results group, simply include column name equity_group: Now, results show mean types classes, include another entry returned list called “Difference(s) groups” calculates contrast, difference group means, gives standard error p-value case ’s interest. Note contrast always represented first group listed minus second group listed. case, reported difference negative, means classes 50% FRL students tended higher sense belonging score. Equity group comparisons work even two group values, like variable class_soc_cat: ’s rare projects set equity goals factors many different groups, metric_mean warns equity_group variable 5 categories; usually means something wrong variable.","code":"metric_mean(ss_data_initial, metric = \"belonging\", equity_group = \"class_frl_cat\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means` #>  equity_group     emmean    SE df lower.CL upper.CL #>  At least 50% FRL   2.87 0.351 24     2.15     3.60 #>  Under 50% FRL      6.93 0.351 24     6.20     7.65 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast                         estimate    SE df t.ratio p.value #>  At least 50% FRL - Under 50% FRL    -4.05 0.496 24  -8.164  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26 metric_mean(ss_data_initial, metric = \"belonging\", equity_group = \"class_soc_cat\", by_class = T) #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means` #>  equity_group emmean    SE   df lower.CL upper.CL #>  0-25% SOC      8.01 0.314 22.2     7.36     8.66 #>  26-50% SOC     6.18 0.312 21.8     5.54     6.83 #>  51-75% SOC     4.20 0.312 21.8     3.56     4.85 #>  76-100% SOC    2.12 0.271 22.0     1.56     2.69 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast                     estimate    SE   df t.ratio p.value #>  (0-25% SOC) - (26-50% SOC)       1.82 0.443 22.0   4.120  0.0024 #>  (0-25% SOC) - (51-75% SOC)       3.80 0.443 22.0   8.590  <.0001 #>  (0-25% SOC) - (76-100% SOC)      5.88 0.415 22.1  14.183  <.0001 #>  (26-50% SOC) - (51-75% SOC)      1.98 0.442 21.8   4.482  0.0010 #>  (26-50% SOC) - (76-100% SOC)     4.06 0.414 21.9   9.814  <.0001 #>  (51-75% SOC) - (76-100% SOC)     2.08 0.414 21.9   5.026  0.0003 #>  #> Degrees-of-freedom method: satterthwaite  #> P value adjustment: tukey method for comparing a family of 4 estimates  #>  #> $`Number of data points` #> [1] 996 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"the-by_class-option","dir":"Articles","previous_headings":"Goals Analysis","what":"The by_class option","title":"Overview of Creating Metrics","text":"metrics collect multiple data points single class. example, student surveys survey multiple students class, many cases multiple times. different classes almost surely different number associated data points – classes might get 10 surveys, another might get 50 – need approach doesn’t - -represent classes differences sample sizes. Fortunately, multilevel models -girding functions tntpmetrics account differences sample sizes classes automatically. make work, must variable data titled class_id representing classroom’s unique identifier. must also set by_class = T examples. set by_class = T /class_id variable, metric_mean account differences sample sizes class. cases multiple rows data associated class, accounting class IDs statistically inappropriate standard errors confidence intervals likely small. projects surely forget collect class ID, metric_means still give results even set by_class = F (specify option, FALSE default), warn statistical issue using metric expecting class ID, like student surveys assignments: get warning set by_class = F analyzing metric less likely multiple responses per class, like expectations observations.","code":"metric_mean(ss_data_initial, metric = \"belonging\") #> Warning: To properly analyze the belonging metric, you should have a variable #> called class_id in your data, and set by_class = TRUE. If you did not collect #> a class ID your results might not be appropriate. Contact Cassie Coddington to #> discuss. #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean     SE  df lower.CL upper.CL #>  overall   4.85 0.0794 995     4.69     5.01 #>  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 996"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"calculating-average-growth-over-time","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating average growth over time","title":"Overview of Creating Metrics","text":"examine average metric score changed two time points, use function metric_growth. function works metric_mean expects provide two data sets: one first time point (data1) one later time point (data2). example, look engagement changed time, can use: example, mean engagement score initially 4.93, increased 5.99 final data collection. difference growth 1.06 points.","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",    by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Means at each timepoint` #>  time    emmean     SE   df lower.CL upper.CL #>  Final    0.326 0.0743 25.3   0.1731    0.479 #>  Initial  0.234 0.0743 25.3   0.0809    0.387 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between timepoints` #>  contrast        estimate     SE   df t.ratio p.value #>  Final - Initial   0.0922 0.0115 1965   8.035  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"using-the-binary-version-of-the-variable-1","dir":"Articles","previous_headings":"Goals Analysis","what":"Using the binary version of the variable","title":"Overview of Creating Metrics","text":"function metric_growth also works binary version construct. Simply set option use_binary TRUE: , remember values represent proportions 0 1. example , 23% responses initial data engaging 33% engaging final data. difference (0.0922) represents 9 percentage points.","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",   use_binary = T,   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Means at each timepoint` #>  time    emmean     SE   df lower.CL upper.CL #>  Final    0.326 0.0743 25.3   0.1731    0.479 #>  Initial  0.234 0.0743 25.3   0.0809    0.387 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between timepoints` #>  contrast        estimate     SE   df t.ratio p.value #>  Final - Initial   0.0922 0.0115 1965   8.035  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26"},{"path":"https://adammaier.github.io/tntpmetrics/articles/metric_overview.html","id":"calculating-differences-in-growth-over-time-between-equity-groups","dir":"Articles","previous_headings":"Goals Analysis","what":"Calculating differences in growth over time between equity groups","title":"Overview of Creating Metrics","text":"can also examine growth compared different groups specifying equity group: example, classes least 50% students receiving FRL initial engagement score 2.93, grew 4.02 final data collection. Classrooms 50% FRL students also grew, 6.94 7.97. Adding equity_group option directly show difference two groups varied time point. case, classes least 50% FRL students engagement scores 4.01 points lower classes initially, 3.95 points lower final data collection. difference differences (.e., -3.95 - -4.01 = 0.0659) shown list element “Change differences groups time”. case, difference small significantly different 0 (p-value 0.48), implying gap types classrooms change meaningfully time. must group definitions data sets, ’ll get error:","code":"metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final,    metric = \"engagement\",   equity_group = \"class_frl_cat\",   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means at each timepoint` #> time = Initial: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00365 0.0714 24.6   -0.143    0.151 #>  Under 50% FRL    0.46356 0.0714 24.6    0.316    0.611 #>  #> time = Final: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00645 0.0714 24.6   -0.141    0.154 #>  Under 50% FRL    0.64546 0.0714 24.6    0.498    0.793 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between groups at each timepoint` #> time = Initial: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.460 0.101 24.6  -4.557  0.0001 #>  #> time = Final: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.639 0.101 24.6  -6.332  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Change in differences between groups over time` #> contrast = At least 50% FRL - Under 50% FRL: #>  contrast1       estimate     SE   df t.ratio p.value #>  Final - Initial   -0.179 0.0226 1965  -7.923  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26 # Renaming FRL class variable so it doesn't match initial data ss_data_final_error <- ss_data_final %>%   mutate(     class_frl_cat = ifelse(       class_frl_cat == \"At least 50% FRL\",       \">= 50% FRL\",       class_frl_cat     )   ) metric_growth(   data1 = ss_data_initial,    data2 = ss_data_final_error,    metric = \"engagement\",   equity_group = \"class_frl_cat\",   by_class = T ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> Error: Some values of equity group are not present in BOTH data sets."},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"tntp-core","dir":"Articles","previous_headings":"","what":"TNTP Core","title":"Observations","text":"Calculating TNTP Core scores works like metrics. make sure required columns use metric = 'tntpcore' make_metric. ’ll simulate data example. Now calculate TNTP Core Observation scores. Note TNTP Core binary threshold, one additional column returned.","code":"tntp_core_scale <- 1:5  n <- 100  tntp_core_data <- data.frame(   ec = sample(tntp_core_scale, n, replace = T),   ao = sample(tntp_core_scale, n, replace = T),   dl = sample(tntp_core_scale, n, replace = T),   cl = sample(tntp_core_scale, n, replace = T) ) tntp_core_data %>%   make_metric(metric = \"tntpcore\") %>%   head() %>%   kable() #> [1] \"0 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"ipg","dir":"Articles","previous_headings":"","what":"IPG","title":"Observations","text":"IPG complicated scoring approach common metrics. originally intended diagnostic development (rather evaluation) tool, different components based subject matter, indicators different scales, can often layers skip logic online form used capture data. Nevertheless, make_metric works just easily IPG metrics, users aware following: function expects Core Action 1 indicators 0-1 scale, Core Action scores (RFS Overall Culture Learning) 1-4 scale. make function work easily data coming Academic Diagnostic forms, tend use scales. make_metric automatically place everything proper scale. make_metric account observations excluded. example, Literacy observations unrateable focused narrative writing. make_metric expect type skip-logic filters often accompany online Academic Diagnostic form, ’s analyst first exclude observations included based business rules. Similarly, online skip logic, occasions Core Actions 2 3 set lowest possible value observer skipped past questions. values left NA, make_metric return NAs overall common metric score. analyst must apply appropriate business rules using make_metric. Analyzing IPG data requires additional variables beyond used directly scoring construct. IPG calculates construct differently based subject grade-level observation. Though calculations slightly involved, can use functions tntpmetrics way examples . just need make sure observation necessary variables.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"ipg-data-should-be-long-and-tidy","dir":"Articles","previous_headings":"IPG","what":"IPG data should be long and tidy","title":"Observations","text":"tntpmetrics expects IPG data long tidy: row separate observation, column represent just one thing. , one column titled ca2_overall (representing overall score Core Action 2); separate variable subject (.e., math2_overall, rlc2_overall, science2_overall, etc.), “tidy” column now contains information two things: subjects core action 2 scores. Instead, must separate column/variable called form data indicating subject IPG applied. Depending project, might require compile IPG data separate forms WordPress/Formidable using tntpmetrics package.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"additional-variables","dir":"Articles","previous_headings":"IPG","what":"Additional variables","title":"Observations","text":"working IPG, observations need variable called form must “Literacy”, “Math”, “Science”, “Social Studies”. observations also need variable called grade_level, numeric can range -1 12, -1 Pre-K 0 Kindergarten. literacy observations take place Pre-K 5th grade classroom must also variable called rfs_overall represents overall score reading foundation skills. Science observations must additional Core Action 1 domains ca1_d, ca1_e, ca1_f. additional domains get scored depends value gatekeeper filter question form: “lesson focus text inquiry scientific practice (experimentation, application, modeling, analysis, etc.)? Note “texts” context also means scientifically appropriate mediums communication, like grade-appropriate videos, data sets, models, etc.“. Thus, science observations must also variable called science_filter must values ”Text“,”Inquiry Scientific Practice“,”“, ”Neither\".","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"calculating-observation-scores","dir":"Articles","previous_headings":"IPG","what":"Calculating observation scores","title":"Observations","text":"needed variables, can create overall observation score just metrics. , notice Core Actions 2 3, Culture Learning rescaled order calculate IPG construct (cm_ipg) returned original scale 1-4. Additionally, oveall Core Action 1 score created new variable (ca1_overall) subdomains included original data. note happens variable called form: … don’t variable called grade_level: … either takes unexpected values: fact, NAs allowed grade-level form determine construct scored. get error data rows NAs columns:","code":"data(ipg_data)  ipg_data %>%   make_metric(metric = \"ipg\") %>%   select(ends_with(\"overall\"), col, cm_ipg) %>%   head() %>%   kable() ipg_data %>%   select(-form) %>%   make_metric(metric = \"ipg\") #> Error: Data is missing the following variable(s): form  #>  Make sure spelling is correct. ipg_data %>%   select(-grade_level) %>%   make_metric(metric = \"ipg\") #> Error: Data is missing the following variable(s): grade_level  #>  Make sure spelling is correct. ipg_data %>%   mutate(form = ifelse(row_number() == 1, \"Blarg\", form)) %>%    make_metric(metric = \"ipg\") #> Error: form variable has values other than Math, Literacy, Science, or Social Studies  #>  Make sure subject options are spelled correctly with correct capitalization. ipg_data %>%   mutate(grade_level = ifelse(row_number() == 1, 15, grade_level)) %>%    make_metric(metric = \"ipg\") #> Error: grade_level has values other than -1, 0, 1, 2, ...12.  #>  Make sure grade_level variable is an integer between -1 and 13. ipg_data %>%   mutate(form = ifelse(row_number() == 1, NA, form)) %>%    make_metric(metric = \"ipg\") #> Error in data_scale_check_ipg(data): All observations must have a value for form. NAs are not allowed."},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"missing-ratings","dir":"Articles","previous_headings":"IPG","what":"Missing ratings","title":"Observations","text":"tntpmetric attempt create overall IPG score every observation data. However, can needed domain ratings included. cases observation missing required domain rating – example, observation missing overall score Core Action 2 Culture Learning – return NA overall IPG construct value tell many observations missing key information. example , can see warning purposefully drop key domain ratings data applying make_metric function: Note messages warnings, code still run. affected observatinos now NAs value overall construct (cm_ippg).","code":"ipg_data %>%   mutate(     col = ifelse(row_number() == 1, NA, col),     ca3_overall = ifelse(row_number() == 2, NA, ca3_overall),     rfs_overall = ifelse(row_number() == 14, NA, rfs_overall),     ca2_overall = ifelse(row_number() == 14, NA, ca2_overall)   ) %>%    make_metric(metric = \"ipg\") %>%   select(observation_number, ends_with(\"overall\"), col, cm_ipg) %>%   slice(1:5, 14) #>   observation_number ca2_overall ca3_overall rfs_overall ca1_overall col cm_ipg #> 1                  1           4           1          NA           1  NA     NA #> 2                  2           1          NA          NA           1   4     NA #> 3                  3           4           1          NA           1   4   1.75 #> 4                  4           1           4          NA           0   3   1.25 #> 5                  5           3           3          NA           1   3   1.75 #> 6                 14          NA           2          NA           2   4     NA"},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"science-observation-scores","dir":"Articles","previous_headings":"IPG","what":"Science observation scores","title":"Observations","text":"(time writing) new science IPG form Core Action 1 subdomain ratings account variety lessons science observers might see. tntpmetrics accounts scoring approaches, must include variable called science_filter data tell function Core Action 1 values expect. Without variable, get error:","code":"ipg_data %>%   filter(form == \"Science\") %>%   make_metric(metric = \"ipg\") %>%   select(science_filter, starts_with(\"ca\"), col, cm_ipg) %>%   head() #>   science_filter ca1_a ca1_b ca1_c ca1_d ca1_e ca1_f ca2_overall ca3_overall #> 1           Both     0     1     0     0     0     1           4           1 #> 2        Neither     0     0    NA    NA    NA    NA           1           4 #> 3           Text     1     0     1     1     0    NA           3           3 #> 4           Text     0     1     1     0     0    NA           1           1 #> 5        Neither     0     0    NA    NA    NA    NA           2           3 #> 6           Both     1     0     0     1     0     0           1           2 #>   ca1_overall col cm_ipg #> 1           1   2   1.25 #> 2           0   3   1.25 #> 3           1   3   1.75 #> 4           1   2   0.50 #> 5           0   2   1.00 #> 6           1   1   0.50  ipg_data %>%   filter(form == \"Science\") %>%   select(-science_filter) %>%   make_metric(metric = \"ipg\") #> Error: Data contains science observation(s) but is missing the following variables: science_filter  #>  Make sure they are spelled correctly."},{"path":"https://adammaier.github.io/tntpmetrics/articles/observation_tool.html","id":"ipg-goals","dir":"Articles","previous_headings":"IPG","what":"IPG goals","title":"Observations","text":"needed variables proper, allowable values, functions tntpmetrics calculate means (overall group) changes time work identically student survey examples . instance:","code":"ipg_data %>%   metric_mean(metric = \"ipg\") #> $`Overall mean` #>  1       emmean     SE df lower.CL upper.CL #>  overall   1.44 0.0502 99     1.34     1.54 #>  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 100"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"practice-data-cms_data","dir":"Articles","previous_headings":"","what":"Practice data: cms_data","title":"Sampling for Common Metrics","text":"demonstrate apply implicit stratification sampling functions tntpmetrics, use school-level data public schools Charlotte-Mecklenberg School district 2018-2019 school year. data, cms_data, already cleaned processed part old Academic Diagnostic contract. cleaning includes filling (imputing) missing values newer schools district mean data missingness. Included data categorical variable indicating grade-levels served (Primary, Middle, High, ), proportion students receiving free reduced-price lunch, proportion students color, state school accountability score (spg_score) letter grade(spg_grade), number enrolled students.","code":"head(cms_data) #> # A tibble: 6 x 7 #>   school_name        grade_level_cat frl_percent soc_percent spg_score spg_grade #>   <chr>              <chr>                 <dbl>       <dbl>     <dbl> <chr>     #> 1 EASTOVER ELEMENTA~ Primary               0.248       0.323        66 C         #> 2 MCALPINE ELEMENTA~ Primary               0.229       0.348        67 C         #> 3 BARNETTE ELEMENTA~ Primary               0.239       0.355        75 B         #> 4 TRILLIUM SPRINGS ~ Primary               0.211       0.629        76 B         #> 5 TORRENCE CREEK EL~ Primary               0.206       0.339        77 B         #> 6 BALLANTYNE ELEMEN~ Primary               0.152       0.477        79 B         #> # ... with 1 more variable: total_students_2018 <dbl>"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"how-does-implicit-stratification-work-its-mostly-just-sorting-data","dir":"Articles","previous_headings":"","what":"How does implicit stratification work? It’s mostly just sorting data","title":"Sampling for Common Metrics","text":"learn specifics implicit stratification, read TNTP memo “placeholder_memo_title” (link Adam’s, potentially revised, memo). short, sort variable(s) want ensure variation, pick random starting spot sorted list, count every k rows get selected units. number steps k represents based many units sampled. example, 170 schools CMS data set. sample 10 schools, pick random starting row 1 17, count every 17th school end data. school picked along way part sample. Importantly, first sorted data characteristics care , ensured schools spread variables – .e., sort ensures schools top data set look different variables schools bottom. Thus, walk data, counting every 17th school, ’s unlikely get sample schools look characteristics. fact, time happen schools district don’t actually vary much characteristics specify. concrete, let’s manually draw implicitly stratified sample 10 schools cms_data, want ensure schools vary percent students color. Let’s see much variability soc_percent sampled data, compared just randomly selecting 10 schools without implicit stratification. standard deviation soc_percent implicit sample higher simple random sample.","code":"# Sort on soc_percent sorted_data <- cms_data %>%   arrange(soc_percent)  # Pick a random number between 1 and 17, and then count every 17 integers ten times set.seed(1) random_start <- sample(1:17, 1) selected_rows <- seq(from = random_start, by = 17, length.out = 10)  # Keep the rows corresponding to the selected rows implicit_sampled_data <- sorted_data %>%   slice(selected_rows) # Randomly pick 10 schools without stratification set.seed(1) nonimplicit_sampled_data <- cms_data %>%   sample_n(10)  # Use Standard Deviation to compare variability on percent_soc sd(implicit_sampled_data$soc_percent) #> [1] 0.2728191 sd(nonimplicit_sampled_data$soc_percent) #> [1] 0.2947937"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"sorting-on-more-than-one-variable-serpentine-sorting","dir":"Articles","previous_headings":"How does implicit stratification work? It’s mostly just sorting data","what":"Sorting on more than one variable: Serpentine sorting","title":"Sampling for Common Metrics","text":"Drawing implicit stratified sample easy just one characteristic interest. just manually ! might seem just easy two characteristics interest, just sort variables. look happens sort cms_data grade-level proportion students receiving FRL. data first sorted (alphabetically) grade-level, within grade-level data sorted ascending order proportion students receiving FRL. code shows data goes high schools middle schools. Notice proportion FRL students makes huge jump Gariner High Jay M Robinson Middle. data gets next grade-level category, must start lowest values frl_percent. leads large differences concurrent rows junctures. Though schools already differ grade-level, disconnect means ’re different key factors, . differ FRL proportion, variable linked characteristics, see ’re also different something like school achievement. disconnected junctures sort magnified sort even two variables. Instead, want concurrent rows data similar possible characteristics interest. helps us obtain variability possible sample. , must use sorting approach known serpentine, instead always starting ascending sort juncture, alternate ascending descending sorts ensure juncture keeps values similar possible. tntpmetrics built function perform serpentine sorts. Let’s apply CMS data look juncture . Now first middle school list one highest proportion students receiving FRL. implicit stratification sample function tntpmetrics uses serpentine sort, need use function serpentine directly, though ’s available part package need purposes, need modify default sampling approach. works much like dplyr::arrange: simply list variables want serpentine sort.","code":"cms_data %>%   select(school_name, grade_level_cat, frl_percent, spg_score) %>%   arrange(grade_level_cat, frl_percent) %>%   slice(24:29) #> # A tibble: 6 x 4 #>   school_name             grade_level_cat frl_percent spg_score #>   <chr>                   <chr>                 <dbl>     <dbl> #> 1 WEST MECKLENBURG HIGH   High                 0.998         54 #> 2 HARDING UNIVERSITY HIGH High                 0.998         52 #> 3 GARINGER HIGH           High                 0.999         59 #> 4 JAY M ROBINSON MIDDLE   Middle               0.0994        92 #> 5 SOUTH CHARLOTTE MIDDLE  Middle               0.135         86 #> 6 COMMUNITY HOUSE MIDDLE  Middle               0.166         85 cms_data %>%   select(school_name, grade_level_cat, frl_percent, spg_score) %>%   serpentine(grade_level_cat, frl_percent) %>%   slice(24:29) #> # A tibble: 6 x 4 #>   school_name             grade_level_cat frl_percent spg_score #>   <chr>                   <chr>                 <dbl>     <dbl> #> 1 WEST MECKLENBURG HIGH   High                  0.998        54 #> 2 HARDING UNIVERSITY HIGH High                  0.998        52 #> 3 GARINGER HIGH           High                  0.999        59 #> 4 ALBEMARLE ROAD MIDDLE   Middle                0.997        50 #> 5 RANSON MIDDLE           Middle                0.997        42 #> 6 MCCLINTOCK MIDDLE       Middle                0.997        55"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"the-order-of-sorting-variables-matters","dir":"Articles","previous_headings":"How does implicit stratification work? It’s mostly just sorting data","what":"The order of sorting variables matters","title":"Sampling for Common Metrics","text":"Even serpentine sorting, get differently sorted list first sort grade-level FRL percent compared first sorting FRL percent grade-level. reasons obvious, ’s important point . general, ’s best first sort variables important , variable data spread . , choose variables order least important. sort many variables, last variables include smaller effect position, much data order already “locked ”.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"making-sorts-categorical","dir":"Articles","previous_headings":"How does implicit stratification work? It’s mostly just sorting data","what":"Making sorts categorical","title":"Sampling for Common Metrics","text":"wanted ensure variability percent FRL SPG Score school? obvious answer just include sort. Notice SPG score barely seems sorted . data first sorted FRL percent, variable nearly unique school: data sorted , little room left sort anything else. want include multiple non-categorical variables implicit stratification, two options: Don’t ; just pick one non categorical variable. approach might worthwhile two variables interest closely related. cases, adding second variable doesn’t add much stratification. variables closely related ’s critically important keep one variables , best option Make variables categorical. common approach allows keep variables stratification process. CMS example, let’s turn percent FRL percent SOC categorical variables. can try sort . , things look better. ’s okay implicitly stratify non-categorical variable, usually last variable listed, cases one types variables.","code":"cms_data %>%   select(school_name, grade_level_cat, frl_percent, spg_score) %>%   serpentine(frl_percent, spg_score) %>%   slice(1:10) #> # A tibble: 10 x 4 #>    school_name                  grade_level_cat frl_percent spg_score #>    <chr>                        <chr>                 <dbl>     <dbl> #>  1 PROVIDENCE SPRING ELEMENTARY Primary              0.0422        90 #>  2 ELON PARK ELEMENTARY         Primary              0.0624        88 #>  3 POLO RIDGE ELEMENTARY        Primary              0.0655        88 #>  4 ELIZABETH LANE ELEM          Primary              0.094         83 #>  5 JAY M ROBINSON MIDDLE        Middle               0.0994        92 #>  6 ARDREY KELL HIGH             High                 0.103         92 #>  7 PROVIDENCE HIGH              High                 0.104         93 #>  8 HAWK RIDGE ELEMENTARY        Primary              0.112         86 #>  9 PARK ROAD MONTESSORI         Primary              0.112         86 #> 10 SOUTH CHARLOTTE MIDDLE       Middle               0.135         86 cms_data %<>%   mutate(     frl_cat = case_when(       frl_percent < 0.25 ~ \"< 25%\",       frl_percent < 0.50 ~ \"25-50%\",       frl_percent < 0.75 ~ \"50-75%\",       frl_percent <= 1.00 ~ \"> 75%\"     ),     frl_cat = ordered(frl_cat, levels = c(\"< 25%\", \"25-50%\", \"50-75%\", \"> 75%\")),     soc_cat = case_when(       soc_percent < 0.25 ~ \"< 25%\",       soc_percent <= 0.50 ~ \"25-50%\",       soc_percent <= 0.75 ~ \"50-75%\",       soc_percent <= 1.00 ~ \"> 75%\"     ),     soc_cat = ordered(soc_cat, levels = c(\"< 25%\", \"25-50%\", \"50-75%\", \"> 75%\"))   ) cms_data %>%   select(school_name, grade_level_cat, frl_cat, spg_score) %>%   serpentine(frl_cat, spg_score) %>%   slice(1:10) #> # A tibble: 10 x 4 #>    school_name                 grade_level_cat frl_cat spg_score #>    <chr>                       <chr>           <ord>       <dbl> #>  1 EASTOVER ELEMENTARY         Primary         < 25%          66 #>  2 MCALPINE ELEMENTARY         Primary         < 25%          67 #>  3 BARNETTE ELEMENTARY         Primary         < 25%          75 #>  4 TRILLIUM SPRINGS MONTESSORI Primary         < 25%          76 #>  5 DAVIDSON ELEMENTARY         Primary         < 25%          76 #>  6 TORRENCE CREEK ELEMENTARY   Primary         < 25%          77 #>  7 SHARON ELEMENTARY           Primary         < 25%          79 #>  8 BALLANTYNE ELEMENTARY       Primary         < 25%          79 #>  9 OLDE PROVIDENCE ELEMENTARY  Primary         < 25%          80 #> 10 J.V. WASHAM ELEMENTARY      Primary         < 25%          81"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"drawing-an-implicit-sample","dir":"Articles","previous_headings":"","what":"Drawing an implicit sample","title":"Sampling for Common Metrics","text":"understanding implicitly stratified sampling works, actually drawing sample straightforward. Use sample_implicit function data indicate many rows want sampled. need sort data ahead time function, contains place indicate variables want implicitly stratify. running function, get data back (sorted appropriately) new variable called in_sample TRUE row selected FALSE . example, let’s sample 20 CMS schools implicitly stratifying grade-level, proportion FRL, proportion SOC, SPG score. get just 20 sampled schools, can filter in_sample makes comparing sampled schools non-sampled schools easy.","code":"cms_sample <- sample_implicit(   data = cms_data,   n = 20,   grade_level_cat, frl_cat, soc_cat, spg_score ) cms_sample %>%   select(school_name, in_sample) %>%   slice(1:10) #> # A tibble: 10 x 2 #>    school_name                in_sample #>    <chr>                      <lgl>     #>  1 WILLIAM AMOS HOUGH HIGH    FALSE     #>  2 LEVINE MIDDLE COLLEGE HIGH FALSE     #>  3 PROVIDENCE HIGH            TRUE      #>  4 ARDREY KELL HIGH           FALSE     #>  5 OLYMPIC HIGH               FALSE     #>  6 MALLARD CREEK HIGH         FALSE     #>  7 CATO MIDDLE COLLEGE HIGH   FALSE     #>  8 SOUTH MECKLENBURG HIGH     FALSE     #>  9 BUTLER HIGH                FALSE     #> 10 HOPEWELL HIGH              FALSE cms_sample %>%   filter(in_sample == T) #> # A tibble: 20 x 10 #>    school_name       grade_level_cat frl_percent soc_percent spg_score spg_grade #>    <chr>             <chr>                 <dbl>       <dbl>     <dbl> <chr>     #>  1 PROVIDENCE HIGH   High                 0.104        0.275        93 A         #>  2 MYERS PARK HIGH   High                 0.308        0.396        83 B         #>  3 CHARLOTTE TEACHE~ High                 0.606        0.819        77 B         #>  4 JAMES MARTIN MID~ Middle               0.987        0.962        37 F         #>  5 NORTHRIDGE MIDDLE Middle               0.996        0.953        58 C         #>  6 FRANCIS BRADLEY ~ Middle               0.352        0.471        73 B         #>  7 BAILEY MIDDLE     Middle               0.189        0.248        87 A         #>  8 LAWRENCE ORR ELE~ Primary              0.996        0.980        69 C         #>  9 MERRY OAKS INTER~ Primary              0.973        0.979        62 C         #> 10 HUNTINGTOWNE FAR~ Primary              0.987        0.914        59 C         #> 11 HIDDEN VALLEY EL~ Primary              0.993        0.986        55 C         #> 12 GOVERNORS VILLAG~ Primary              0.996        0.969        52 D         #> 13 OAKDALE ELEMENTA~ Primary              0.995        0.956        46 D         #> 14 ALLENBROOK ELEME~ Primary              0.994        0.964        36 F         #> 15 ELIZABETH TRADIT~ Primary              0.5          0.782        70 B         #> 16 MATTHEWS ELEMENT~ Primary              0.340        0.381        75 B         #> 17 MYERS PARK TRADI~ Primary              0.404        0.637        70 B         #> 18 IRWIN ACADEMIC C~ Primary              0.256        0.763        83 B         #> 19 BAIN ELEMENTARY   Primary              0.226        0.299        83 B         #> 20 PROVIDENCE SPRIN~ Primary              0.0422       0.301        90 A         #> # ... with 4 more variables: total_students_2018 <dbl>, frl_cat <ord>, #> #   soc_cat <ord>, in_sample <lgl> cms_sample %>%   group_by(in_sample) %>%   summarize(mean_frl= mean(frl_percent)) #> # A tibble: 2 x 2 #>   in_sample mean_frl #>   <lgl>        <dbl> #> 1 FALSE        0.647 #> 2 TRUE         0.612"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"accounting-for-size-differences","dir":"Articles","previous_headings":"Drawing an implicit sample","what":"Accounting for size differences","title":"Sampling for Common Metrics","text":"implicit stratification approach outlined treats row data equally. many cases, makes sense, example row teacher classroom. However, cases row data might represent substantially different number subunits, like classrooms students. often case sampling schools. Treating school equally means students small schools likely studied students large schools former’s school equally likely chosen latter, school chosen students small schools likely one classrooms visited given fewer options . sample_implicit includes option specify variable data representing measure size. account size choose schools probability proportional size. CMS data, can use total number students schools measure size account draw sample Notice incorporating size increased number secondary schools sample. schools typically contain students, including size increased chance ’d chosen.","code":"cms_sample_withsize <- sample_implicit(   data = cms_data,   n = 20,   grade_level_cat, frl_cat, soc_cat, spg_score,   size_var = total_students_2018 ) cms_sample_withsize %>%   filter(in_sample == T) #> # A tibble: 20 x 10 #>    school_name       grade_level_cat frl_percent soc_percent spg_score spg_grade #>    <chr>             <chr>                 <dbl>       <dbl>     <dbl> <chr>     #>  1 LEVINE MIDDLE CO~ High                 0.205        0.426        99 A         #>  2 SOUTH MECKLENBUR~ High                 0.432        0.615        79 B         #>  3 PERFORMANCE LEAR~ High                 0.609        0.742        45 D         #>  4 VANCE HIGH        High                 0.990        0.966        61 C         #>  5 JAMES MARTIN MID~ Middle               0.987        0.962        37 F         #>  6 MCCLINTOCK MIDDLE Middle               0.997        0.882        55 C         #>  7 ALEXANDER GRAHAM~ Middle               0.309        0.404        68 C         #>  8 SOUTH CHARLOTTE ~ Middle               0.135        0.294        86 A         #>  9 COCHRANE COLLEGI~ Other                0.996        0.978        38 F         #> 10 JOSEPH W GRIER A~ Primary              0.999        0.958        64 C         #> 11 RIVER OAKS ACADE~ Primary              0.995        0.873        59 C         #> 12 J H GUNN ELEMENT~ Primary              0.996        0.895        56 C         #> 13 GOVERNORS VILLAG~ Primary              0.996        0.969        52 D         #> 14 HORNETS NEST ELE~ Primary              0.995        0.970        46 D         #> 15 VAUGHAN ACADEMY ~ Primary              0.606        0.819        59 C         #> 16 LONG CREEK ELEME~ Primary              0.530        0.728        62 C         #> 17 ENDHAVEN ELEMENT~ Primary              0.286        0.503        75 B         #> 18 MALLARD CREEK EL~ Primary              0.479        0.899        59 C         #> 19 ELIZABETH LANE E~ Primary              0.094        0.27         83 B         #> 20 PROVIDENCE SPRIN~ Primary              0.0422       0.301        90 A         #> # ... with 4 more variables: total_students_2018 <dbl>, frl_cat <ord>, #> #   soc_cat <ord>, in_sample <lgl>"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"other-sampling-approaches","dir":"Articles","previous_headings":"","what":"Other sampling approaches","title":"Sampling for Common Metrics","text":"Implicit stratified sampling technique. rather create functions account sampling situations, many approaches can accomplished existing R functions packages, combining sample_implicit.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"simple-random-sampling","dir":"Articles","previous_headings":"Other sampling approaches","what":"Simple random sampling","title":"Sampling for Common Metrics","text":"don’t need want select stratified sample, ’s easiest use already available functions. simple random sample – .e., equivalent throwing row data hat selecting n random – recommend sample_n dplyr. approach used earlier vignette choose 10 random schools","code":"set.seed(123) cms_data %>%   sample_n(10) #> # A tibble: 10 x 9 #>    school_name       grade_level_cat frl_percent soc_percent spg_score spg_grade #>    <chr>             <chr>                 <dbl>       <dbl>     <dbl> <chr>     #>  1 MALLARD CREEK HI~ High                  0.455       0.843        75 B         #>  2 PARK ROAD MONTES~ Primary               0.112       0.319        86 A         #>  3 REEDY CREEK ELEM~ Primary               0.721       0.910        63 C         #>  4 ALBEMARLE ROAD M~ Middle                0.997       0.936        50 D         #>  5 HUNTERSVILLE ELE~ Primary               0.305       0.349        83 B         #>  6 CHARLOTTE ENGINE~ Other                 0.454       0.784        83 B         #>  7 COCHRANE COLLEGI~ Other                 0.996       0.978        38 F         #>  8 PERFORMANCE LEAR~ High                  0.609       0.742        45 D         #>  9 NATIONS FORD ELE~ Primary               0.996       0.979        59 C         #> 10 RIVER OAKS ACADE~ Primary               0.995       0.873        59 C         #> # ... with 3 more variables: total_students_2018 <dbl>, frl_cat <ord>, #> #   soc_cat <ord>"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"explicitly-stratifying","dir":"Articles","previous_headings":"Other sampling approaches","what":"Explicitly stratifying","title":"Sampling for Common Metrics","text":"Explicitly stratifying sample typically means selecting fixed number units explicit groups (strata). example, wanted ensure selected 3 schools grade-level type, ’d first split data grade-type, randomly select schools group. , ’s easiest implement already available tools: combining sample_n group_by dplyr. approach guarantees specific number schools strata. differs implicitly stratifying, one get sample units (e.g., schools) different strata, preordained set number units selected strata - fact, strata contains units chance zero units strata chosen. Explicitly stratifying data ensures stratum represented. good bad: force unit chosen stratum, data may longer representative strata vary wildly size. One need apply weights collected data get back representative values, process seldom used TNTP. time, forcing unit chosen stratum ensures group excluded, even data taken together longer representative overall population. approach use depends needs project. ’re looking get data representative entire school, district, network, etc. implicitly stratifying data likely get easily.","code":"set.seed(123) cms_data %>%   group_by(grade_level_cat) %>%   sample_n(3) #> # A tibble: 12 x 9 #> # Groups:   grade_level_cat [4] #>    school_name       grade_level_cat frl_percent soc_percent spg_score spg_grade #>    <chr>             <chr>                 <dbl>       <dbl>     <dbl> <chr>     #>  1 NORTH MECKLENBUR~ High                  0.536       0.821        61 C         #>  2 MALLARD CREEK HI~ High                  0.455       0.843        75 B         #>  3 ROCKY RIVER HIGH  High                  0.636       0.923        53 D         #>  4 EASTWAY MIDDLE    Middle                0.997       0.962        40 D         #>  5 MCCLINTOCK MIDDLE Middle                0.997       0.882        55 C         #>  6 SOUTHWEST MIDDLE~ Middle                0.545       0.770        49 D         #>  7 HAWTHORNE ACADEM~ Other                 0.974       0.926        52 C         #>  8 CHARLOTTE ENGINE~ Other                 0.454       0.784        83 B         #>  9 COCHRANE COLLEGI~ Other                 0.996       0.978        38 F         #> 10 PARK ROAD MONTES~ Primary               0.112       0.319        86 A         #> 11 MOUNTAIN ISLAND ~ Primary               0.584       0.718        59 C         #> 12 NATIONS FORD ELE~ Primary               0.996       0.979        59 C         #> # ... with 3 more variables: total_students_2018 <dbl>, frl_cat <ord>, #> #   soc_cat <ord>"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"combining-explicit-and-implicit-stratification-using-purrrmap","dir":"Articles","previous_headings":"Other sampling approaches","what":"Combining explicit and implicit stratification using purrr::map","title":"Sampling for Common Metrics","text":"Using existing functions, can also combine explicit implicit stratification. example, wanted three schools grade-level type, within grade-level want pick schools randomly; instead wanted implicitly stratify proportion students receiving FRL SPG score. can combine stratification approaches help map function purrr package. implement, split data grade-level type, apply sample_implicit function separately grade-type. ’ll use map_df function combine results back single data.frame one step. Instead selecting number schools grade-level, can instead vary many schools chosen providing map function additional information. case, ’ll use map2_df can tell use value n corresponding element list give . example , want select 2 high schools, 3 middle schools, 4 primary schools, 1 “” school. examples assume familiarity purrr indeed ways use sample_implicit existing R functions meet needs. point simply highlight can build upon sample_implicit accomplish sampling goals.","code":"library(purrr) cms_data %>%   split(.$grade_level_cat) %>%   map_df(~ sample_implicit(.x, n = 3, frl_cat, spg_score)) %>%   filter(in_sample)  %>%   select(school_name, grade_level_cat) #> # A tibble: 12 x 2 #>    school_name                              grade_level_cat #>    <chr>                                    <chr>           #>  1 PROVIDENCE HIGH                          High            #>  2 HOPEWELL HIGH                            High            #>  3 CHARLOTTE TEACHER EARLY COLLEGE- UNCC    High            #>  4 SOUTH CHARLOTTE MIDDLE                   Middle          #>  5 J M ALEXANDER MIDDLE                     Middle          #>  6 NORTHEAST MIDDLE                         Middle          #>  7 CHARLOTTE ENGINEERING EARLY COLLEGE-UNCC Other           #>  8 NORTHWEST SCHOOL OF THE ARTS             Other           #>  9 COCHRANE COLLEGIATE ACADEMY              Other           #> 10 J.V. WASHAM ELEMENTARY                   Primary         #> 11 REEDY CREEK ELEMENTARY                   Primary         #> 12 HIGHLAND RENAISSANCE ACADEMY             Primary cms_data %>%   split(.$grade_level_cat) %>%   map2_df(     .x = .,     .y = list(\"High\" = 2, \"Middle\" = 3, \"Other\" = 1, \"Primary\" = 4),     .f = ~ sample_implicit(.x, n = .y, frl_cat, spg_score)   ) %>%   filter(in_sample) %>%   select(school_name, grade_level_cat) #> # A tibble: 10 x 2 #>    school_name                  grade_level_cat #>    <chr>                        <chr>           #>  1 LEVINE MIDDLE COLLEGE HIGH   High            #>  2 INDEPENDENCE HIGH            High            #>  3 SOUTH CHARLOTTE MIDDLE       Middle          #>  4 J M ALEXANDER MIDDLE         Middle          #>  5 NORTHEAST MIDDLE             Middle          #>  6 NORTHWEST SCHOOL OF THE ARTS Other           #>  7 BALLANTYNE ELEMENTARY        Primary         #>  8 PARKSIDE ELEMENTARY          Primary         #>  9 ALBEMARLE ROAD ELEMENTARY    Primary         #> 10 DAVID COX ROAD ELEMENTARY    Primary"},{"path":"https://adammaier.github.io/tntpmetrics/articles/sample_implicit.html","id":"questions","dir":"Articles","previous_headings":"","what":"Questions?","title":"Sampling for Common Metrics","text":"Contact Adam Maier questions.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/articles/student_surveys.html","id":"engagement","dir":"Articles","previous_headings":"","what":"Engagement","title":"Student Surveys","text":"","code":"# data set in tntpmetrics package data(ss_data_initial)  ss_data_initial %>%   select(response_id, starts_with('eng')) %>%   make_metric(metric = \"engagement\") %>%   head() %>%   kable() #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/student_surveys.html","id":"relevance","dir":"Articles","previous_headings":"","what":"Relevance","title":"Student Surveys","text":"","code":"ss_data_initial %>%   select(response_id, starts_with('rel')) %>%   make_metric(metric = \"relevance\") %>%   head() %>%   kable() #> [1] \"5 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/student_surveys.html","id":"belonging","dir":"Articles","previous_headings":"","what":"Belonging","title":"Student Surveys","text":"","code":"ss_data_initial %>%   select(response_id, starts_with('bel'), starts_with('tch')) %>%   make_metric(metric = \"belonging\") %>%   head() %>%   kable() #> [1] \"4 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/teacher_expectations.html","id":"expectations-per-teacher","dir":"Articles","previous_headings":"","what":"Expectations Per Teacher","title":"High Expectations","text":"’ll first calculate whether teacher high expectations students. column cm_expectations teacher’s expectations score. ’s sum expectations columns. cm_binary_expectations boolean representing TRUE teacher high expectations FALSE otherwise. Teachers high expectations expectation score exceeds cutoff. value 11 current expectations version: teachers scores 11 high expectations, scores 11 high expectations.","code":"teacher_expectations %>%   make_metric(metric = \"expectations\") %>%   head() %>%   kable() #> [1] \"0 Row(s) in data were NOT used because missing at least one value needed to create common measure.\""},{"path":"https://adammaier.github.io/tntpmetrics/articles/teacher_expectations.html","id":"percentage-of-teachers-with-high-expectations","dir":"Articles","previous_headings":"","what":"Percentage of Teachers with High Expectations","title":"High Expectations","text":"can use metric_mean calculate percentage teachers high expectations, standard errors included. Note use_binary set TRUE get percentage teacher high expectations. simply wanted average expectations score set parameter FALSE. code saves mean value R object.","code":"expectations_mean <- metric_mean(teacher_expectations, metric = \"expectations\", use_binary = T) #> [1] \"0 Row(s) in data were NOT used because missing at least one value needed to create common measure.\"  expectations_mean #> $`Overall mean` #>  1       emmean     SE  df lower.CL upper.CL #>  overall  0.353 0.0276 299    0.299    0.408 #>  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 300 expectations_mean_value <- summary(expectations_mean[['Overall mean']])$emmean  round(expectations_mean_value, 2) #> [1] 0.35"},{"path":"https://adammaier.github.io/tntpmetrics/articles/teacher_expectations.html","id":"percentage-of-teachers-with-high-expectations-by-group","dir":"Articles","previous_headings":"","what":"Percentage of Teachers with High Expectations by Group","title":"High Expectations","text":"metric_mean also can used calculate percentages group, along standard errors group comparisons. Now, let’s tidy results placing data frame. let’s comparisons.","code":"group_expectations_mean <- metric_mean(teacher_expectations, metric = \"expectations\", equity_group = \"teacher_group\", by_class = F, use_binary = T) #> [1] \"0 Row(s) in data were NOT used because missing at least one value needed to create common measure.\"  group_expectations_mean #> $`Group means` #>  equity_group emmean     SE  df lower.CL upper.CL #>  A             0.281 0.0488 297    0.185    0.377 #>  B             0.383 0.0462 297    0.292    0.474 #>  C             0.392 0.0485 297    0.296    0.487 #>  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast estimate     SE  df t.ratio p.value #>  A - B    -0.10193 0.0672 297  -1.517  0.2842 #>  A - C    -0.11050 0.0688 297  -1.606  0.2445 #>  B - C    -0.00858 0.0670 297  -0.128  0.9910 #>  #> P value adjustment: tukey method for comparing a family of 3 estimates  #>  #> $`Number of data points` #> [1] 300 summary(group_expectations_mean[['Group means']]) %>%   as_tibble() %>%   kable() summary(group_expectations_mean[['Difference(s) between groups']]) %>%   as_tibble() %>%   kable()"},{"path":"https://adammaier.github.io/tntpmetrics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Maier. Author. Shane Orr. Author, maintainer.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maier , Orr S (2022). tntpmetrics: TNTP Common Metric Analysis Preparation. R package version 0.1.0.","code":"@Manual{,   title = {tntpmetrics: TNTP Common Metric Analysis and Preparation},   author = {Adam Maier and Shane Orr},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"https://adammaier.github.io/tntpmetrics/index.html","id":"tntpmetrics","dir":"","previous_headings":"","what":"TNTP Common Metric Analysis and Preparation","title":"TNTP Common Metric Analysis and Preparation","text":"TNTP uses common metrics learn work project teams . using similar metrics across different projects, TNTP teams better able track progress reliably coordinate work across contexts. Common metrics also serve core organization-wide goals. Though nearly projects using common metrics somewhere work, collecting common data guarantee project score aggregate metrics similarly. despite scoring guidance, using valuable analyst time walk steps calculate metrics, score teams’ goals ideal. tntpmetrics package includes three handy functions start raw, project-collected data calculate individual common metric scores, summarize average common metrics scores entire project, compare common metric scores (typically student sub-) groups, analyze changes metric scores time. work functions checking potential errors inconsistencies data – data proper scale, missing needed variables. functions attempt anticipate potential issues occur collecting raw data calculating simple means .","code":""},{"path":"https://adammaier.github.io/tntpmetrics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"TNTP Common Metric Analysis and Preparation","text":"can install tntpmetrics GitHub:","code":"devtools::install_github(\"adamMaier/tntpmetrics\")"},{"path":"https://adammaier.github.io/tntpmetrics/index.html","id":"using-tntpmetrics","dir":"","previous_headings":"","what":"Using tntpmetrics","title":"TNTP Common Metric Analysis and Preparation","text":"learn package works, please read following articles: Overview creating metrics Student surveys: Engagement, Relevance, Belonging Observation tools: IPG TNTP Core Teacher leader surveys: Expectations (current items older items) Assignments: Grade-Appropriate Assignments Sampling: Sample schools, teachers, classrooms","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/cms_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Charlotte-Mecklenberg School district in the 2018-2019 school year. — cms_data","title":"Charlotte-Mecklenberg School district in the 2018-2019 school year. — cms_data","text":"dataset containing school-level information CMS schools, including demographic breakdowns    school school grades.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/cms_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Charlotte-Mecklenberg School district in the 2018-2019 school year. — cms_data","text":"","code":"cms_data"},{"path":"https://adammaier.github.io/tntpmetrics/reference/cms_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Charlotte-Mecklenberg School district in the 2018-2019 school year. — cms_data","text":"dataframe 170 rows 7 columns.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/ipg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"IPG scores by classroom. — ipg_data","title":"IPG scores by classroom. — ipg_data","text":"dataset containing IPG scores classroom. data simulated actual data.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/ipg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPG scores by classroom. — ipg_data","text":"","code":"ipg_data"},{"path":"https://adammaier.github.io/tntpmetrics/reference/ipg_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IPG scores by classroom. — ipg_data","text":"dataframe 100 rows 14 columns.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate raw common metric values — make_metric","title":"Calculate raw common metric values — make_metric","text":"make_metric takes raw data containing indicators, survey items, etc. needed   calculate score common metric. creates new column/variable data   value scored metric.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate raw common metric values — make_metric","text":"","code":"make_metric(data, metric, scaleusewarning = T)"},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate raw common metric values — make_metric","text":"data Data single timepoint. Used tntpmetric_mean. metric Quoted name common metric. Options \"engagement\", \"belonging\", \"relevance\", \"assignments\", \"expectations\", \"expectations_old\", tntpcore\", \"ipg\". scaleusewarning logical (T/F) indicating whether function generate warning values scale used. example, student survey data contains values 1s 2s mean data 1-4 scale, 0-3 scale. scaleusewarning = T, function warn . warning mean data wrong. example, Academic Ownership domain TNTP CORE 5 potential values: 1, 2, 3, 4, 5. uncommon data teachers never rated 4 domain. case, printed warning can ignored. Default TRUE. confident data right scale, can suppress warning setting TRUE.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate raw common metric values — make_metric","text":"data.frame identical original except new columns/variables named   input metric cm_ prefix (e.g., cm_engagement, cm_ipg, etc.)   value scored metric. metrics specific cut-point scores   designate something meaningful (e.g., expectations score least 12 represent \"high expectations\")   another new variable also created cm_binary_ prefix (e.g., cm_binary_expectations).   variable logical (TRUE/FALSE) values true implying row , example, high   expectations. Currently, attributes original data.frame (like groups) preserved.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":"data-and-variable-format","dir":"Reference","previous_headings":"","what":"Data and Variable Format","title":"Calculate raw common metric values — make_metric","text":"make_metric used raw metric data.   row data represent single rated outcome. example, row data   single completed survey, single rated assignment, single classroom observation, etc.   data must components needed score construct. example, data student   engagement variables corresponding four survey questions used calculate   engagement. Leave items raw form - functions automatically account items   need reverse coded (). requirement data contains   needed variables variables numeric (.e., data values 0s 1s,   '' 'Yes'. ensures common metrics calculated correctly   consistently across projects. metric set needed variables must   spelled exactly shown . : engagement: eng_like, eng_losttrack, eng_interest, eng_moreabout belonging: tch_problem, bel_ideas, bel_fitin, tch_interestedideas relevance: rel_asmuch, rel_future, rel_outside, rel_rightnow expectations: exp_fairtomaster, exp_oneyearenough, exp_allstudents, exp_appropriate expectations_old: exp_allstudents, exp_toochallenging, exp_oneyear, exp_different, exp_overburden, exp_began tntpcore: ec, ao, dl, cl ipg: form, grade_level, ca1_a, ca1_b, ca1_c, ca2_overall, ca3_overall, col.     K-5 Literacy observations must also rfs_overall.     Science observations must also ca1_d, ca1_e, ca1_f, science_filter assignments: content, relevance, practice Note NAMES variables needed data. can okay    variables NA values specific rows. example, K-5 Literacy observations IPG require    either Core Actions (ca1_a, ca1_b, ca1_c, ca2_overall, ca3_overall) /rfs_overall.    observation core actions still needs variable called rfs_overall, value    can just NA. See vignette(\"analyzing_metrics\") details.    Note Expectations. items used measure expectations shifted collection six,    mostly reverse-coded worded items four positively worded items. expectations metrics available,    current 4-item expectations metric known \"expectations\" older 6-item expectations    metric known \"expectations_old\". See vignette(\"analyzing_metrics\") details.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/make_metric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate raw common metric values — make_metric","text":"","code":"# Compute the engagement score for each collected survey test_data <- make_metric(ss_data_initial, metric = \"engagement\") #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" head(test_data) #>   class_id response_id class_frl_cat class_soc_cat bel_fitin bel_ideas #> 1        A           3 Under 50% FRL     0-25% SOC         3         3 #> 2        A          39 Under 50% FRL     0-25% SOC         2         2 #> 3        A          73 Under 50% FRL     0-25% SOC         2         2 #> 4        A          84 Under 50% FRL     0-25% SOC         2         3 #> 5        A          85 Under 50% FRL     0-25% SOC         2         2 #> 6        A          94 Under 50% FRL     0-25% SOC         2         2 #>   eng_interest eng_like eng_losttrack eng_moreabout rel_asmuch rel_future #> 1            2        2             2             2          2          2 #> 2            2        3             2             2          2          3 #> 3            2        2             2             2          2          2 #> 4            2        2             2             2          2          3 #> 5            2        3             2             2          2          2 #> 6            2        2             2             2          3          2 #>   rel_outside rel_rightnow tch_interestedideas tch_problem cm_engagement #> 1           2            2                   2           2             8 #> 2           2            2                   2           2             9 #> 3           2            2                   2           3             8 #> 4           2            2                   2           2             8 #> 5           2            2                   2           2             9 #> 6           2            2                   3           2             8 #>   cm_binary_engagement #> 1                 TRUE #> 2                 TRUE #> 3                 TRUE #> 4                 TRUE #> 5                 TRUE #> 6                 TRUE"},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"metric_mean computes mean common metric score single point time.   metric_growth computes mean change common metric score two points   time. functions can disaggregate  results based group characteristic used   equity comparisons. can also account metrics multiple data points come   classroom, like based student surveys assignments.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"","code":"metric_mean(   data,   metric,   use_binary = F,   equity_group = NULL,   by_class = F,   scaleusewarning = T )  metric_growth(   data1,   data2,   metric,   use_binary = T,   equity_group = NULL,   by_class = F,   scaleusewarning = T )"},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"data Data single timepoint. Used metric_mean. metric Quoted name common metric. Options \"engagement\", \"belonging\", \"relevance\", \"assignments\", \"tntpcore\", \"ipg\". use_binary logical (T/F) option use binary version metric. default FALSE mean growth calculations based overall metric value. want calculations done binary version (e.g., looking percent teachers 'high expectations' rather average expectations score) set option TRUE. Note metric tntpcore binary version. equity_group Optional quoted name categorical column/variable data contains equity group designation. example, data indicator variable called class_frl either \"50 FRL\", analyst set equity_group = \"class_frl\" get differences metric two groups. Default equity comparison. by_class logical (T/F) option indicating multiple rows data come class. by_class = T, analysis automatically account different sample sizes classes adjust standard errors account lack independence data deriving class. set FALSE, data must variable titled class_id. Default FALSE. scaleusewarning logical (T/F) indicating whether function generate warning values scale used. example, student survey data contains values 1s 2s mean data 1-4 scale, 0-3 scale. scaleusewarning = T, function warn . warning mean data wrong. example, Academic Ownership domain TNTP CORE 5 potential values: 1, 2, 3, 4, 5. uncommon data teachers never rated 4 domain. case, printed warning can ignored. Default TRUE. confident data right scale, can suppress warning setting TRUE. data1 Data initial timepoint. Used metric_growth. data2 Data final timepoint. Used metric_growth.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"list results including overall mean mean equity group (metric_mean), mean change time mean change group (metric_growth). Means accompanied standard errors 95  intervals. Also included list elements number data points used analysis.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":"data-and-variable-format","dir":"Reference","previous_headings":"","what":"Data and Variable Format","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"metric_mean metric_growth used raw metric data.   row data represent single rated outcome. example, row data   single completed survey, single rated assignment, single classroom observation, etc.   data metric already calculated instead components needed   make calculation. example, data student engagement column   variable titled engagement, variables corresponding four survey questions   used calculate engagement. Leave items raw form - functions automatically   account items need reverse coded. requirement data contains   needed variables variables numeric (.e., data values 0s 1s,   '' 'Yes'. ensures common metrics calculated correctly   consistently across projects. metric set needed variables must   spelled exactly shown . : engagement: eng_like, eng_losttrack, eng_interest, eng_moreabout belonging: tch_problem, bel_ideas, bel_fitin, tch_interestedideas relevance: rel_asmuch, rel_future, rel_outside, rel_rightnow expectations: exp_fairtomaster, exp_oneyearenough, exp_allstudents, exp_appropriate expectations_old: exp_allstudents, exp_toochallenging, exp_oneyear, exp_different, exp_overburden, exp_began tntpcore: ec, ao, dl, cl ipg: form, grade_level, ca1_a, ca1_b, ca1_c, ca2_overall, ca3_overall, col.     K-5 Literacy observations must also rfs_overall.     Science observations must also ca1_d, ca1_e, ca1_f, science_filter assignments: content, relevance, practice Note NAMES variables needed data. can okay    variables NA values specific rows. example, K-5 Literacy observations IPG require    either Core Actions (ca1_a, ca1_b, ca1_c, ca2_overall, ca3_overall) /rfs_overall.    observation core actions still needs variable called rfs_overall, value    can just NA. See vignette(\"analyzing_metrics\") details.    Note Expectations. items used measure expectations shifted collection six,    mostly reverse-coded worded items four positively worded items. expectations metrics available,    current 4-item expectations metric known \"expectations\" older 6-item expectations    metric known \"expectations_old\". See vignette(\"analyzing_metrics\") details.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/metric_analyses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute single common metric mean, difference between groups, and/or change over time. — metric_analyses","text":"","code":"# Compute the mean engagement score for an entire project at a single time point. Setting # by_class = TRUE because multiple surveys come from the same class. metric_mean(ss_data_final, metric = \"engagement\", by_class = TRUE) #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Overall mean` #>  1       emmean    SE df lower.CL upper.CL #>  overall   5.99 0.458 25     5.05     6.93 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Number of data points` #> [1] 998 #>  #> $`Number of included classes` #> [1] 26 #>   # Do the same, but now compare results by a class's FRL population metric_mean(ss_data_final, metric = \"engagement\", equity_group = \"class_frl_cat\", by_class = TRUE) #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means` #>  equity_group     emmean    SE df lower.CL upper.CL #>  At least 50% FRL   4.02 0.335 24     3.33     4.71 #>  Under 50% FRL      7.96 0.335 24     7.27     8.65 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Difference(s) between groups` #>  contrast                         estimate    SE df t.ratio p.value #>  At least 50% FRL - Under 50% FRL    -3.95 0.473 24  -8.333  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 998 #>  #> $`Number of included classes` #> [1] 26 #>   # Look at change in engagement over time, then look at how differences in engagement between a # class's FRL population change over time metric_growth(   ss_data_initial,   ss_data_final,   metric = \"engagement\",   by_class = TRUE  ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Means at each timepoint` #>  time    emmean     SE   df lower.CL upper.CL #>  Final    0.326 0.0743 25.3   0.1731    0.479 #>  Initial  0.234 0.0743 25.3   0.0809    0.387 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between timepoints` #>  contrast        estimate     SE   df t.ratio p.value #>  Final - Initial   0.0922 0.0115 1965   8.035  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26 #>   metric_growth(   ss_data_initial,   ss_data_final,   metric = \"engagement\",   equity_group = \"class_frl_cat\",   by_class = TRUE  ) #> [1] \"6 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> [1] \"2 Row(s) in data were NOT used because missing at least one value needed to create common measure.\" #> $`Group means at each timepoint` #> time = Initial: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00365 0.0714 24.6   -0.143    0.151 #>  Under 50% FRL    0.46356 0.0714 24.6    0.316    0.611 #>  #> time = Final: #>  equity_group      emmean     SE   df lower.CL upper.CL #>  At least 50% FRL 0.00645 0.0714 24.6   -0.141    0.154 #>  Under 50% FRL    0.64546 0.0714 24.6    0.498    0.793 #>  #> Degrees-of-freedom method: satterthwaite  #> Confidence level used: 0.95  #>  #> $`Differences between groups at each timepoint` #> time = Initial: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.460 0.101 24.6  -4.557  0.0001 #>  #> time = Final: #>  contrast                         estimate    SE   df t.ratio p.value #>  At least 50% FRL - Under 50% FRL   -0.639 0.101 24.6  -6.332  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Change in differences between groups over time` #> contrast = At least 50% FRL - Under 50% FRL: #>  contrast1       estimate     SE   df t.ratio p.value #>  Final - Initial   -0.179 0.0226 1965  -7.923  <.0001 #>  #> Degrees-of-freedom method: satterthwaite  #>  #> $`Number of data points` #> [1] 1992 #>  #> $`Number of included classes` #> [1] 26 #>"},{"path":"https://adammaier.github.io/tntpmetrics/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://adammaier.github.io/tntpmetrics/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data with implicit stratification — sample_implicit","title":"Sample data with implicit stratification — sample_implicit","text":"sample_implicit draws random sample n units data.frame way maximizes   variation variables interest. example, can randomly sample schools way   ensures sampled schools much variation possible key characteristics, like   percent students color average achievement. Implicit stratification common method   sample units educational setting: NCES frequently uses approach   deciding survey test, including   NCES.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data with implicit stratification — sample_implicit","text":"","code":"sample_implicit(data, n, ..., size_var = NULL, random_num = 1)"},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample data with implicit stratification — sample_implicit","text":"data data.frame rows sampled n number rows sampled ... variables implicitly stratify. effect, variables data first sorted. order variables listed matters: first variable listed variability sampled data, list variables want stratify order decreasing importance, variables listed near end large effect stratification. size_var variable indicating size row. allows select sample accounts differences size unit. example, row represents school, appropriate size_var number students attending school schools serving students likley selected. important multiple stages sampling, like first sampling schools sampling classrooms within schools. Without setting size_va example, shcool equally likely selected, meaning classrooms small schools likely selected small school classrooms chance selected large school many classrooms. Default NULL. random_num random number control random sampling process results reproducible. Default 1.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample data with implicit stratification — sample_implicit","text":"data.frame equal size original data, sorted differently new   variabled called in_sample TRUE row selected FALSE   otherwise.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample data with implicit stratification — sample_implicit","text":"sample_implicit implicitly samples units first sorting data key variables   indicated. uses serpentine sort, alternates ascending descending orders   two adjacent rows sorted data similar possible. See   serpentine details serpentine sorting   vignette(\"sample_implicit\") longer discussion useful. Serpentine   sorting commonly used NCES achieve implicit stratification.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/sample_implicit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data with implicit stratification — sample_implicit","text":"","code":"# Sample 7 cars after implicitly stratifying on gear and mpg. sampled_cars <- sample_implicit(data = mtcars, n = 7, am, mpg) sampled_cars #> # A tibble: 32 x 12 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb in_sample #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl>     #>  1  10.4     8  460    215  3     5.42  17.8     0     0     3     4 FALSE     #>  2  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 TRUE      #>  3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 FALSE     #>  4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 FALSE     #>  5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 FALSE     #>  6  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 TRUE      #>  7  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 FALSE     #>  8  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 FALSE     #>  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 FALSE     #> 10  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 FALSE     #> # ... with 22 more rows  # Once the sample is complete, it's easy to compare sampled to non-sampled cars library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union sampled_cars %>%   group_by(in_sample) %>%   summarize(mean_mpg = mean(mpg)) #> # A tibble: 2 x 2 #>   in_sample mean_mpg #>   <lgl>        <dbl> #> 1 FALSE         20.0 #> 2 TRUE          20.5  # Using implicit stratification gets us more variation on variables of interest than just randomly # selecting rows. For example, if we chose 3 cars, we might not get variability on the variables # of interest. In this case, sample_implicit got us more variablity on mpg than a simple random # sample set.seed(12) simplesample <- sample_n(mtcars, 3) implicitsample <- sample_implicit(data = mtcars, n = 3, am, mpg) count(simplesample, am) #>   am n #> 1  0 1 #> 2  1 2 implicitsample %>%   filter(in_sample) %>%   count(am) #> # A tibble: 2 x 2 #>      am     n #>   <dbl> <int> #> 1     0     2 #> 2     1     1  # You'll get different, but reproducible results if you change the random number sampled_cars1 <- sample_implicit(data = mtcars, n = 5, am, mpg) sampled_cars2 <- sample_implicit(data = mtcars, n = 5, am, mpg, random_num = 2) sampled_cars1 #> # A tibble: 32 x 12 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb in_sample #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl>     #>  1  10.4     8  460    215  3     5.42  17.8     0     0     3     4 FALSE     #>  2  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 TRUE      #>  3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 FALSE     #>  4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 FALSE     #>  5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 FALSE     #>  6  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 FALSE     #>  7  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 FALSE     #>  8  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 FALSE     #>  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 TRUE      #> 10  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 FALSE     #> # ... with 22 more rows sampled_cars2 #> # A tibble: 32 x 12 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb in_sample #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl>     #>  1  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 FALSE     #>  2  10.4     8  460    215  3     5.42  17.8     0     0     3     4 TRUE      #>  3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 FALSE     #>  4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 FALSE     #>  5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 FALSE     #>  6  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 FALSE     #>  7  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 FALSE     #>  8  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 TRUE      #>  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 FALSE     #> 10  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 FALSE     #> # ... with 22 more rows  # If you have a variable that represents size, it's easy to account for that when selecting # the sample sample_implicit(data = mtcars, n = 5, am, mpg, size_var = hp) #> # A tibble: 32 x 12 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb in_sample #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl>     #>  1  10.4     8  460    215  3     5.42  17.8     0     0     3     4 FALSE     #>  2  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 TRUE      #>  3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 FALSE     #>  4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 FALSE     #>  5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 FALSE     #>  6  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 FALSE     #>  7  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 TRUE      #>  8  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 FALSE     #>  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 FALSE     #> 10  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 FALSE     #> # ... with 22 more rows"},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform serpentine sorts on multiple variables. — serpentine","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"serpentine sorts data serpentine fashion (alternating ascending   descending orders) variables specified. mixed_serpentine sorts data   ascending descending sorts every variable specified except last, serpentine   sorted.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"","code":"serpentine(data = NULL, ..., random_num = 1)  mixed_serpentine(data = NULL, ...)"},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"data data.frame sorted ... variables serpentine sort, given order. serpentine, first variable listed sorted ascending order, second variable alternate ascending descending order value first variable, . mixed_serpentine, assumed variables listed sorted ascending order except last, serpentine sorted. user can choose descending sort variable except last using desc() wrapper. random_num random number break ties randomly. helpful variables data sorted categorical liekly several rows data identical values category. Default 1 results reproducable.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"data.frame equal size original data, sorted differently.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"helpful complex sampling designs implicit stratification, reduces   variation stratified outcome adjacent sampled units thus reduces overall   sampling error. Serpentine sorts commonly used NCES surveys.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/serpentine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform serpentine sorts on multiple variables. — serpentine","text":"","code":"# All variables except first are serpentine sorted serpentine(data = mtcars, cyl, mpg) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>  2  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #>  3  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  4  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #>  5  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  6  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  7  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  8  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  9  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 10  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #> # ... with 22 more rows serpentine(data = mtcars, cyl, vs, mpg) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  2  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  3  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  4  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  6  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  8  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  9  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> # ... with 22 more rows  # Same sort variables, but different resulting order because changing random number serpentine(data = mtcars, vs, am) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 #>  2  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 #>  3  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  4  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 #>  5  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #>  6  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 #>  7  10.4     8  460    215  3     5.42  17.8     0     0     3     4 #>  8  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 #>  9  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #> 10  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #> # ... with 22 more rows serpentine(data = mtcars, vs, am, random_num = 5) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  2  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #>  3  10.4     8  460    215  3     5.42  17.8     0     0     3     4 #>  4  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 #>  5  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 #>  6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 #>  7  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #>  8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #>  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 #> 10  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #> # ... with 22 more rows  # Changing the random number has minimal effect when a non-cateogrical variable is included serpentine(data = mtcars, cyl, vs, mpg) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  2  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  3  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  4  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  6  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  8  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  9  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> # ... with 22 more rows serpentine(data = mtcars, cyl, vs, mpg, random_num = 23) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  2  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  3  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  4  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  5  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  6  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  8  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  9  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> # ... with 22 more rows  # cyl, and vs are ascending sorted while mpg is serpentine sorted mixed_serpentine(mtcars, cyl, vs, mpg) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #>  2  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  3  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  4  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  5  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  6  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  8  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  9  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #> 10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #> # ... with 22 more rows  # cyl is ascending, vs is descending, and mpg is serpentine sorted mixed_serpentine(mtcars, cyl, dplyr::desc(vs), mpg) #> # A tibble: 32 x 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>  2  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #>  3  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  4  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #>  5  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  6  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  7  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #>  8  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  9  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #> 10  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> # ... with 22 more rows"},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_final.html","id":null,"dir":"Reference","previous_headings":"","what":"Final student survey. — ss_data_final","title":"Final student survey. — ss_data_final","text":"dataset containing simulated data final student survey. contains columns ss_survey_initial dataset.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_final.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final student survey. — ss_data_final","text":"","code":"ss_data_final"},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_final.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Final student survey. — ss_data_final","text":"dataframe 1000 rows 16 columns.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial student survey. — ss_data_initial","title":"Initial student survey. — ss_data_initial","text":"dataset containing simulated data initial student survey. contains columns ss_survey_final dataset.","code":""},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial student survey. — ss_data_initial","text":"","code":"ss_data_initial"},{"path":"https://adammaier.github.io/tntpmetrics/reference/ss_data_initial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Initial student survey. — ss_data_initial","text":"dataframe 1000 rows 16 columns.","code":""}]
